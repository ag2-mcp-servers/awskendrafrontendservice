# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:14:26+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    SecretStr,
    confloat,
    conint,
    constr,
)


class AccessControlConfigurationId(
    RootModel[constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=36)]
):
    root: constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=36)


class AccessControlConfigurationName(
    RootModel[constr(pattern=r'[\S\s]*', min_length=1, max_length=200)]
):
    root: constr(pattern=r'[\S\s]*', min_length=1, max_length=200)


class AccessControlConfigurationSummary(BaseModel):
    Id: AccessControlConfigurationId


class AccessControlConfigurationSummaryList(
    RootModel[List[AccessControlConfigurationSummary]]
):
    root: List[AccessControlConfigurationSummary]


class AccessDeniedException(RootModel[Any]):
    root: Any


class AdditionalResultAttributeValueType(Enum):
    TEXT_WITH_HIGHLIGHTS_VALUE = 'TEXT_WITH_HIGHLIGHTS_VALUE'


class AlfrescoEntity(Enum):
    wiki = 'wiki'
    blog = 'blog'
    documentLibrary = 'documentLibrary'


class AmazonResourceName(RootModel[constr(min_length=1, max_length=1011)]):
    root: constr(min_length=1, max_length=1011)


class Blob(RootModel[str]):
    root: str


class Boolean(RootModel[bool]):
    root: bool


class ClaimRegex(RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=100)]):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=100)


class ClientTokenName(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class ColumnName(
    RootModel[constr(pattern=r'^[a-zA-Z][a-zA-Z0-9_]*$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^[a-zA-Z][a-zA-Z0-9_]*$', min_length=1, max_length=100)


class ConditionOperator(Enum):
    GreaterThan = 'GreaterThan'
    GreaterThanOrEquals = 'GreaterThanOrEquals'
    LessThan = 'LessThan'
    LessThanOrEquals = 'LessThanOrEquals'
    Equals = 'Equals'
    NotEquals = 'NotEquals'
    Contains = 'Contains'
    NotContains = 'NotContains'
    Exists = 'Exists'
    NotExists = 'NotExists'
    BeginsWith = 'BeginsWith'


class ConflictException(RootModel[Any]):
    root: Any


class ConfluenceAttachmentFieldName(Enum):
    AUTHOR = 'AUTHOR'
    CONTENT_TYPE = 'CONTENT_TYPE'
    CREATED_DATE = 'CREATED_DATE'
    DISPLAY_URL = 'DISPLAY_URL'
    FILE_SIZE = 'FILE_SIZE'
    ITEM_TYPE = 'ITEM_TYPE'
    PARENT_ID = 'PARENT_ID'
    SPACE_KEY = 'SPACE_KEY'
    SPACE_NAME = 'SPACE_NAME'
    URL = 'URL'
    VERSION = 'VERSION'


class ConfluenceAuthenticationType(Enum):
    HTTP_BASIC = 'HTTP_BASIC'
    PAT = 'PAT'


class ConfluenceBlogFieldName(Enum):
    AUTHOR = 'AUTHOR'
    DISPLAY_URL = 'DISPLAY_URL'
    ITEM_TYPE = 'ITEM_TYPE'
    LABELS = 'LABELS'
    PUBLISH_DATE = 'PUBLISH_DATE'
    SPACE_KEY = 'SPACE_KEY'
    SPACE_NAME = 'SPACE_NAME'
    URL = 'URL'
    VERSION = 'VERSION'


class ConfluencePageFieldName(Enum):
    AUTHOR = 'AUTHOR'
    CONTENT_STATUS = 'CONTENT_STATUS'
    CREATED_DATE = 'CREATED_DATE'
    DISPLAY_URL = 'DISPLAY_URL'
    ITEM_TYPE = 'ITEM_TYPE'
    LABELS = 'LABELS'
    MODIFIED_DATE = 'MODIFIED_DATE'
    PARENT_ID = 'PARENT_ID'
    SPACE_KEY = 'SPACE_KEY'
    SPACE_NAME = 'SPACE_NAME'
    URL = 'URL'
    VERSION = 'VERSION'


class ConfluenceSpaceFieldName(Enum):
    DISPLAY_URL = 'DISPLAY_URL'
    ITEM_TYPE = 'ITEM_TYPE'
    SPACE_KEY = 'SPACE_KEY'
    URL = 'URL'


class ConfluenceSpaceIdentifier(
    RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=255)


class ConfluenceSpaceList(RootModel[List[ConfluenceSpaceIdentifier]]):
    root: List[ConfluenceSpaceIdentifier] = Field(..., min_length=1)


class ConfluenceVersion(Enum):
    CLOUD = 'CLOUD'
    SERVER = 'SERVER'


class ContentType(Enum):
    PDF = 'PDF'
    HTML = 'HTML'
    MS_WORD = 'MS_WORD'
    PLAIN_TEXT = 'PLAIN_TEXT'
    PPT = 'PPT'
    RTF = 'RTF'
    XML = 'XML'
    XSLT = 'XSLT'
    MS_EXCEL = 'MS_EXCEL'
    CSV = 'CSV'
    JSON = 'JSON'
    MD = 'MD'


class CrawlDepth(RootModel[conint(ge=0, le=10)]):
    root: conint(ge=0, le=10)


class CreateAccessControlConfigurationResponse(BaseModel):
    Id: AccessControlConfigurationId


class DataSourceDateFieldFormat(
    RootModel[constr(pattern=r'^(?!\s).*(?<!\s)$', min_length=4, max_length=40)]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!\s).*(?<!\s)$', min_length=4, max_length=40)


class DataSourceFieldName(
    RootModel[constr(pattern=r'^[a-zA-Z][a-zA-Z0-9_.]*$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^[a-zA-Z][a-zA-Z0-9_.]*$', min_length=1, max_length=100)


class DataSourceId(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=100)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=100)


class DataSourceIdList(RootModel[List[DataSourceId]]):
    root: List[DataSourceId] = Field(..., max_length=100, min_length=1)


class DataSourceInclusionsExclusionsStringsMember(
    RootModel[constr(min_length=1, max_length=150)]
):
    root: constr(min_length=1, max_length=150)


class DataSourceName(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=1000)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=1000)


class DataSourceStatus(Enum):
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'
    UPDATING = 'UPDATING'
    ACTIVE = 'ACTIVE'


class DataSourceSyncJobId(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=100)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=100)


class DataSourceSyncJobMetricTarget(BaseModel):
    DataSourceId_1: DataSourceId = Field(..., alias='DataSourceId')
    DataSourceSyncJobId_1: Optional[DataSourceSyncJobId] = Field(
        None, alias='DataSourceSyncJobId'
    )


class DataSourceSyncJobStatus(Enum):
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'
    SYNCING = 'SYNCING'
    INCOMPLETE = 'INCOMPLETE'
    STOPPING = 'STOPPING'
    ABORTED = 'ABORTED'
    SYNCING_INDEXING = 'SYNCING_INDEXING'


class DataSourceType(Enum):
    S3 = 'S3'
    SHAREPOINT = 'SHAREPOINT'
    DATABASE = 'DATABASE'
    SALESFORCE = 'SALESFORCE'
    ONEDRIVE = 'ONEDRIVE'
    SERVICENOW = 'SERVICENOW'
    CUSTOM = 'CUSTOM'
    CONFLUENCE = 'CONFLUENCE'
    GOOGLEDRIVE = 'GOOGLEDRIVE'
    WEBCRAWLER = 'WEBCRAWLER'
    WORKDOCS = 'WORKDOCS'
    FSX = 'FSX'
    SLACK = 'SLACK'
    BOX = 'BOX'
    QUIP = 'QUIP'
    JIRA = 'JIRA'
    GITHUB = 'GITHUB'
    ALFRESCO = 'ALFRESCO'
    TEMPLATE = 'TEMPLATE'


class DatabaseEngineType(Enum):
    RDS_AURORA_MYSQL = 'RDS_AURORA_MYSQL'
    RDS_AURORA_POSTGRESQL = 'RDS_AURORA_POSTGRESQL'
    RDS_MYSQL = 'RDS_MYSQL'
    RDS_POSTGRESQL = 'RDS_POSTGRESQL'


class DatabaseHost(RootModel[constr(min_length=1, max_length=253)]):
    root: constr(min_length=1, max_length=253)


class DatabaseName(
    RootModel[constr(pattern=r'^[a-zA-Z][a-zA-Z0-9_]*$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^[a-zA-Z][a-zA-Z0-9_]*$', min_length=1, max_length=100)


class DatabasePort(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class DeleteAccessControlConfigurationResponse(BaseModel):
    pass


class DeleteExperienceResponse(BaseModel):
    pass


class Description(
    RootModel[constr(pattern=r'^\P{C}*$', min_length=0, max_length=1000)]
):
    root: constr(pattern=r'^\P{C}*$', min_length=0, max_length=1000)


class DocumentAttributeKey(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9_][a-zA-Z0-9_-]*', min_length=1, max_length=200)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9_][a-zA-Z0-9_-]*', min_length=1, max_length=200)


class DocumentAttributeKeyList(RootModel[List[DocumentAttributeKey]]):
    root: List[DocumentAttributeKey] = Field(..., max_length=100, min_length=1)


class DocumentAttributeStringValue(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class DocumentAttributeValueType(Enum):
    STRING_VALUE = 'STRING_VALUE'
    STRING_LIST_VALUE = 'STRING_LIST_VALUE'
    LONG_VALUE = 'LONG_VALUE'
    DATE_VALUE = 'DATE_VALUE'


class DocumentId(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class DocumentIdList(RootModel[List[DocumentId]]):
    root: List[DocumentId] = Field(..., max_length=10, min_length=1)


class DocumentMetadataBoolean(RootModel[bool]):
    root: bool


class DocumentMetadataConfigurationName(RootModel[constr(min_length=1, max_length=30)]):
    root: constr(min_length=1, max_length=30)


class DocumentStatus(Enum):
    NOT_FOUND = 'NOT_FOUND'
    PROCESSING = 'PROCESSING'
    INDEXED = 'INDEXED'
    UPDATED = 'UPDATED'
    FAILED = 'FAILED'
    UPDATE_FAILED = 'UPDATE_FAILED'


class Domain(
    RootModel[
        constr(pattern=r'^(?!-)[A-Za-z0-9-].*(?<!-)$', min_length=1, max_length=63)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!-)[A-Za-z0-9-].*(?<!-)$', min_length=1, max_length=63)


class Duration(RootModel[constr(pattern=r'[0-9]+[s]', min_length=1, max_length=10)]):
    root: constr(pattern=r'[0-9]+[s]', min_length=1, max_length=10)


class Endpoint(RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=2048)]):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=2048)


class EndpointType(Enum):
    HOME = 'HOME'


class EnterpriseId(
    RootModel[constr(pattern=r'^[A-Z0-9]*$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[A-Z0-9]*$', min_length=1, max_length=64)


class EntityFilter(RootModel[List[AlfrescoEntity]]):
    root: List[AlfrescoEntity] = Field(..., max_length=3, min_length=1)


class EntityId(
    RootModel[
        constr(
            pattern=r'^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$',
            min_length=1,
            max_length=47,
        )
    ]
):
    root: constr(
        pattern=r'^([0-9a-f]{10}-|)[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}$',
        min_length=1,
        max_length=47,
    )


class EntityIdsList(RootModel[List[EntityId]]):
    root: List[EntityId] = Field(..., max_length=25, min_length=1)


class EntityType(Enum):
    USER = 'USER'
    GROUP = 'GROUP'


class ErrorCode(Enum):
    InternalError = 'InternalError'
    InvalidRequest = 'InvalidRequest'


class ErrorMessage(
    RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=2048)


class ExperienceEndpoint(BaseModel):
    Endpoint_1: Optional[Endpoint] = Field(None, alias='Endpoint')
    EndpointType_1: Optional[EndpointType] = Field(None, alias='EndpointType')


class ExperienceEndpoints(RootModel[List[ExperienceEndpoint]]):
    root: List[ExperienceEndpoint] = Field(..., max_length=2, min_length=1)


class ExperienceId(
    RootModel[constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=36)]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=36)


class ExperienceName(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=1000)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=1000)


class ExperienceStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class FailedEntity(BaseModel):
    EntityId_1: Optional[EntityId] = Field(None, alias='EntityId')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')


class FailedEntityList(RootModel[List[FailedEntity]]):
    root: List[FailedEntity] = Field(..., max_length=25, min_length=1)


class FailureReason(
    RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=2048)


class FaqFileFormat(Enum):
    CSV = 'CSV'
    CSV_WITH_HEADER = 'CSV_WITH_HEADER'
    JSON = 'JSON'


class FaqId(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=100)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=100)


class FaqIdsList(RootModel[List[FaqId]]):
    root: List[FaqId] = Field(..., max_length=100, min_length=1)


class FaqName(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=100)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=100)


class FaqStatus(Enum):
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class FeaturedDocument(BaseModel):
    Id: Optional[DocumentId] = None


class FeaturedDocumentList(RootModel[List[FeaturedDocument]]):
    root: List[FeaturedDocument]


class FeaturedDocumentMissing(BaseModel):
    Id: Optional[DocumentId] = None


class FeaturedDocumentMissingList(RootModel[List[FeaturedDocumentMissing]]):
    root: List[FeaturedDocumentMissing]


class FeaturedResultsConflictException(RootModel[Any]):
    root: Any


class FeaturedResultsSetDescription(
    RootModel[constr(pattern=r'^\P{C}*$', min_length=0, max_length=1000)]
):
    root: constr(pattern=r'^\P{C}*$', min_length=0, max_length=1000)


class FeaturedResultsSetId(
    RootModel[constr(pattern=r'^[a-zA-Z-0-9]*', min_length=36, max_length=36)]
):
    root: constr(pattern=r'^[a-zA-Z-0-9]*', min_length=36, max_length=36)


class FeaturedResultsSetIdList(RootModel[List[FeaturedResultsSetId]]):
    root: List[FeaturedResultsSetId] = Field(..., max_length=50, min_length=1)


class FeaturedResultsSetName(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][ a-zA-Z0-9_-]*', min_length=1, max_length=1000)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][ a-zA-Z0-9_-]*', min_length=1, max_length=1000)


class FeaturedResultsSetStatus(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class FeedbackToken(
    RootModel[constr(pattern=r'^\P{C}*.\P{C}*$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^\P{C}*.\P{C}*$', min_length=1, max_length=2048)


class FileSystemId(
    RootModel[constr(pattern=r'^(fs-[0-9a-f]{8,})$', min_length=11, max_length=21)]
):
    root: constr(pattern=r'^(fs-[0-9a-f]{8,})$', min_length=11, max_length=21)


class FolderId(RootModel[constr(min_length=1, max_length=500)]):
    root: constr(min_length=1, max_length=500)


class FolderIdList(RootModel[List[FolderId]]):
    root: List[FolderId]


class FsxFileSystemType(Enum):
    WINDOWS = 'WINDOWS'


class GitHubDocumentCrawlProperties(BaseModel):
    CrawlIssue: Optional[Boolean] = None
    CrawlIssueComment: Optional[Boolean] = None
    CrawlIssueCommentAttachment: Optional[Boolean] = None
    CrawlPullRequest: Optional[Boolean] = None
    CrawlPullRequestComment: Optional[Boolean] = None
    CrawlPullRequestCommentAttachment: Optional[Boolean] = None
    CrawlRepositoryDocuments: Optional[Boolean] = None


class GroupAttributeField(
    RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=100)


class GroupId(RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=1024)]):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=1024)


class HighlightType(Enum):
    STANDARD = 'STANDARD'
    THESAURUS_SYNONYM = 'THESAURUS_SYNONYM'


class Host(RootModel[constr(pattern=r'([^\s]*)', min_length=1, max_length=253)]):
    root: constr(pattern=r'([^\s]*)', min_length=1, max_length=253)


class IdentityAttributeName(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=1000)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=1000)


class Importance(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class IndexEdition(Enum):
    DEVELOPER_EDITION = 'DEVELOPER_EDITION'
    ENTERPRISE_EDITION = 'ENTERPRISE_EDITION'


class IndexFieldName(
    RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=30)]
):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=30)


class IndexId(
    RootModel[constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9-]*', min_length=36, max_length=36)]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9-]*', min_length=36, max_length=36)


class IndexName(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=1000)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=1000)


class IndexStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    FAILED = 'FAILED'
    UPDATING = 'UPDATING'
    SYSTEM_UPDATING = 'SYSTEM_UPDATING'


class IndexedQuestionAnswersCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class IndexedTextBytes(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class IndexedTextDocumentsCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class Interval(Enum):
    THIS_MONTH = 'THIS_MONTH'
    THIS_WEEK = 'THIS_WEEK'
    ONE_WEEK_AGO = 'ONE_WEEK_AGO'
    TWO_WEEKS_AGO = 'TWO_WEEKS_AGO'
    ONE_MONTH_AGO = 'ONE_MONTH_AGO'
    TWO_MONTHS_AGO = 'TWO_MONTHS_AGO'


class InvalidRequestException(RootModel[Any]):
    root: Any


class IssueSubEntity(Enum):
    COMMENTS = 'COMMENTS'
    ATTACHMENTS = 'ATTACHMENTS'
    WORKLOGS = 'WORKLOGS'


class IssueSubEntityFilter(RootModel[List[IssueSubEntity]]):
    root: List[IssueSubEntity] = Field(..., max_length=3, min_length=0)


class Issuer(RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=65)]):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=65)


class JiraAccountUrl(
    RootModel[
        constr(
            pattern=r'^https:\/\/[a-zA-Z0-9_\-\.]+(\.atlassian\.net\/)$',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'^https:\/\/[a-zA-Z0-9_\-\.]+(\.atlassian\.net\/)$',
        min_length=1,
        max_length=2048,
    )


class KeyLocation(Enum):
    URL = 'URL'
    SECRET_MANAGER = 'SECRET_MANAGER'


class KmsKeyId(RootModel[SecretStr]):
    root: SecretStr


class LambdaArn(
    RootModel[
        constr(
            pattern=r'/arn:aws[a-zA-Z-]*:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?/',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'/arn:aws[a-zA-Z-]*:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?/',
        min_length=1,
        max_length=2048,
    )


class LanguageCode(
    RootModel[constr(pattern=r'[a-zA-Z-]*', min_length=2, max_length=10)]
):
    root: constr(pattern=r'[a-zA-Z-]*', min_length=2, max_length=10) = Field(
        ...,
        description='The code for a language. The default language is English. For more information on supported languages, including their codes, see <a href="https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html">Adding documents in languages other than English</a>.',
    )


class ListTagsForResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName


class Long(RootModel[int]):
    root: int


class LookBackPeriod(RootModel[conint(ge=0, le=168)]):
    root: conint(ge=0, le=168)


class MaxContentSizePerPageInMegaBytes(RootModel[confloat(ge=1e-06, le=50.0)]):
    root: confloat(ge=1e-06, le=50.0)


class MaxLinksPerPage(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MaxResultsIntegerForListAccessControlConfigurationsRequest(
    RootModel[conint(ge=1, le=100)]
):
    root: conint(ge=1, le=100)


class MaxResultsIntegerForListDataSourceSyncJobsRequest(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class MaxResultsIntegerForListDataSourcesRequest(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxResultsIntegerForListEntityPersonasRequest(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxResultsIntegerForListExperiencesRequest(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxResultsIntegerForListFaqsRequest(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxResultsIntegerForListFeaturedResultsSetsRequest(
    RootModel[conint(ge=1, le=100)]
):
    root: conint(ge=1, le=100)


class MaxResultsIntegerForListIndicesRequest(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxResultsIntegerForListPrincipalsRequest(RootModel[conint(ge=1, le=10)]):
    root: conint(ge=1, le=10)


class MaxResultsIntegerForListQuerySuggestionsBlockLists(
    RootModel[conint(ge=1, le=100)]
):
    root: conint(ge=1, le=100)


class MaxResultsIntegerForListThesauriRequest(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class MaxUrlsPerMinuteCrawlRate(RootModel[conint(ge=1, le=300)]):
    root: conint(ge=1, le=300)


class MemberGroup(BaseModel):
    DataSourceId_1: Optional[DataSourceId] = Field(None, alias='DataSourceId')
    GroupId_1: GroupId = Field(..., alias='GroupId')


class MemberGroups(RootModel[List[MemberGroup]]):
    root: List[MemberGroup] = Field(..., max_length=1000, min_length=1)


class MetricType(Enum):
    QUERIES_BY_COUNT = 'QUERIES_BY_COUNT'
    QUERIES_BY_ZERO_CLICK_RATE = 'QUERIES_BY_ZERO_CLICK_RATE'
    QUERIES_BY_ZERO_RESULT_RATE = 'QUERIES_BY_ZERO_RESULT_RATE'
    DOCS_BY_CLICK_COUNT = 'DOCS_BY_CLICK_COUNT'
    AGG_QUERY_DOC_METRICS = 'AGG_QUERY_DOC_METRICS'
    TREND_QUERY_DOC_METRICS = 'TREND_QUERY_DOC_METRICS'


class MetricValue(RootModel[constr(pattern=r'(([1-9][0-9]*)|0)')]):
    root: constr(pattern=r'(([1-9][0-9]*)|0)')


class MimeType(RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=256)]):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=256)


class MinimumNumberOfQueryingUsers(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class MinimumQueryCount(RootModel[conint(ge=1, le=10000)]):
    root: conint(ge=1, le=10000)


class Mode(Enum):
    ENABLED = 'ENABLED'
    LEARN_ONLY = 'LEARN_ONLY'


class NameType(RootModel[SecretStr]):
    root: SecretStr


class NextToken(RootModel[constr(min_length=1, max_length=800)]):
    root: constr(min_length=1, max_length=800)


class ObjectBoolean(RootModel[bool]):
    root: bool


class OneDriveUser(
    RootModel[
        constr(
            pattern=r'^(?!\s).+@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$',
            min_length=1,
            max_length=256,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(?!\s).+@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$',
        min_length=1,
        max_length=256,
    )


class OneDriveUserList(RootModel[List[OneDriveUser]]):
    root: List[OneDriveUser] = Field(..., max_length=100, min_length=1)


class Order(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class OrganizationId(
    RootModel[constr(pattern=r'd-[0-9a-fA-F]{10}', min_length=12, max_length=12)]
):
    root: constr(pattern=r'd-[0-9a-fA-F]{10}', min_length=12, max_length=12)


class OrganizationName(
    RootModel[constr(pattern=r'^[A-Za-z0-9_.-]+$', min_length=1, max_length=60)]
):
    root: constr(pattern=r'^[A-Za-z0-9_.-]+$', min_length=1, max_length=60)


class Persona(Enum):
    OWNER = 'OWNER'
    VIEWER = 'VIEWER'


class Port(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class PrincipalMappingStatus(Enum):
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'
    PROCESSING = 'PROCESSING'
    DELETING = 'DELETING'
    DELETED = 'DELETED'


class PrincipalName(
    RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=200)


class PrincipalOrderingId(RootModel[conint(ge=0, le=32535158400000)]):
    root: conint(ge=0, le=32535158400000)


class PrincipalType(Enum):
    USER = 'USER'
    GROUP = 'GROUP'


class QueryCapacityUnit(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class QueryId(
    RootModel[constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9-]*', min_length=1, max_length=36)]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9-]*', min_length=1, max_length=36)


class QueryIdentifiersEnclosingOption(Enum):
    DOUBLE_QUOTES = 'DOUBLE_QUOTES'
    NONE = 'NONE'


class QueryResultFormat(Enum):
    TABLE = 'TABLE'
    TEXT = 'TEXT'


class QueryResultType(Enum):
    DOCUMENT = 'DOCUMENT'
    QUESTION_ANSWER = 'QUESTION_ANSWER'
    ANSWER = 'ANSWER'


class QuerySuggestionsBlockListId(
    RootModel[constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9-]*', min_length=36, max_length=36)]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9-]*', min_length=36, max_length=36)


class QuerySuggestionsBlockListName(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', min_length=1, max_length=100)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9](-*[a-zA-Z0-9])*', min_length=1, max_length=100)


class QuerySuggestionsBlockListStatus(Enum):
    ACTIVE = 'ACTIVE'
    CREATING = 'CREATING'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'
    ACTIVE_BUT_UPDATE_FAILED = 'ACTIVE_BUT_UPDATE_FAILED'
    FAILED = 'FAILED'


class QuerySuggestionsId(RootModel[constr(min_length=1, max_length=36)]):
    root: constr(min_length=1, max_length=36)


class QuerySuggestionsStatus(Enum):
    ACTIVE = 'ACTIVE'
    UPDATING = 'UPDATING'


class QueryText(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class QueryTextList(RootModel[List[QueryText]]):
    root: List[QueryText] = Field(..., max_length=49, min_length=0)


class ReadAccessType(Enum):
    ALLOW = 'ALLOW'
    DENY = 'DENY'


class RelevanceType(Enum):
    RELEVANT = 'RELEVANT'
    NOT_RELEVANT = 'NOT_RELEVANT'


class RepositoryName(
    RootModel[constr(pattern=r'^[A-Za-z0-9_.-]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[A-Za-z0-9_.-]+$', min_length=1, max_length=64)


class RepositoryNames(RootModel[List[RepositoryName]]):
    root: List[RepositoryName]


class ResourceAlreadyExistException(RootModel[Any]):
    root: Any


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceUnavailableException(RootModel[Any]):
    root: Any


class ResultId(RootModel[constr(min_length=1, max_length=73)]):
    root: constr(min_length=1, max_length=73)


class RoleArn(
    RootModel[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=0,
            max_length=1284,
        )
    ]
):
    root: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=0,
        max_length=1284,
    )


class S3BucketName(
    RootModel[
        constr(
            pattern=r'[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]', min_length=3, max_length=63
        )
    ]
):
    root: constr(
        pattern=r'[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9]', min_length=3, max_length=63
    )


class S3ObjectKey(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class S3Path(BaseModel):
    Bucket: S3BucketName
    Key: S3ObjectKey


class SalesforceChatterFeedIncludeFilterType(Enum):
    ACTIVE_USER = 'ACTIVE_USER'
    STANDARD_USER = 'STANDARD_USER'


class SalesforceChatterFeedIncludeFilterTypes(
    RootModel[List[SalesforceChatterFeedIncludeFilterType]]
):
    root: List[SalesforceChatterFeedIncludeFilterType] = Field(
        ..., max_length=2, min_length=1
    )


class SalesforceCustomKnowledgeArticleTypeName(
    RootModel[constr(pattern=r'^[a-zA-Z][a-zA-Z0-9_]*$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^[a-zA-Z][a-zA-Z0-9_]*$', min_length=1, max_length=100)


class SalesforceKnowledgeArticleState(Enum):
    DRAFT = 'DRAFT'
    PUBLISHED = 'PUBLISHED'
    ARCHIVED = 'ARCHIVED'


class SalesforceKnowledgeArticleStateList(
    RootModel[List[SalesforceKnowledgeArticleState]]
):
    root: List[SalesforceKnowledgeArticleState] = Field(..., max_length=3, min_length=1)


class SalesforceStandardObjectName(Enum):
    ACCOUNT = 'ACCOUNT'
    CAMPAIGN = 'CAMPAIGN'
    CASE = 'CASE'
    CONTACT = 'CONTACT'
    CONTRACT = 'CONTRACT'
    DOCUMENT = 'DOCUMENT'
    GROUP = 'GROUP'
    IDEA = 'IDEA'
    LEAD = 'LEAD'
    OPPORTUNITY = 'OPPORTUNITY'
    PARTNER = 'PARTNER'
    PRICEBOOK = 'PRICEBOOK'
    PRODUCT = 'PRODUCT'
    PROFILE = 'PROFILE'
    SOLUTION = 'SOLUTION'
    TASK = 'TASK'
    USER = 'USER'


class ScanSchedule(RootModel[str]):
    root: str


class ScoreConfidence(Enum):
    VERY_HIGH = 'VERY_HIGH'
    HIGH = 'HIGH'
    MEDIUM = 'MEDIUM'
    LOW = 'LOW'
    NOT_AVAILABLE = 'NOT_AVAILABLE'


class Search(BaseModel):
    Displayable: Optional[Boolean] = None
    Facetable: Optional[Boolean] = None
    Searchable: Optional[Boolean] = None
    Sortable: Optional[Boolean] = None


class SecretArn(
    RootModel[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=1,
            max_length=1284,
        )
    ]
):
    root: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=1,
        max_length=1284,
    )


class SeedUrl(
    RootModel[constr(pattern=r'^(https?):\/\/([^\s]*)', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^(https?):\/\/([^\s]*)', min_length=1, max_length=2048)


class SeedUrlList(RootModel[List[SeedUrl]]):
    root: List[SeedUrl] = Field(..., max_length=100, min_length=0)


class ServerSideEncryptionConfiguration(BaseModel):
    KmsKeyId_1: Optional[KmsKeyId] = Field(None, alias='KmsKeyId')


class ServiceNowAuthenticationType(Enum):
    HTTP_BASIC = 'HTTP_BASIC'
    OAUTH2 = 'OAUTH2'


class ServiceNowBuildVersionType(Enum):
    LONDON = 'LONDON'
    OTHERS = 'OTHERS'


class ServiceNowHostUrl(
    RootModel[
        constr(
            pattern=r'^(?!(^(https?|ftp|file):\/\/))[a-z0-9-]+(\.service-now\.com)$',
            min_length=1,
            max_length=2048,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^(?!(^(https?|ftp|file):\/\/))[a-z0-9-]+(\.service-now\.com)$',
        min_length=1,
        max_length=2048,
    )


class ServiceNowKnowledgeArticleFilterQuery(
    RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=2048)


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SharePointOnlineAuthenticationType(Enum):
    HTTP_BASIC = 'HTTP_BASIC'
    OAUTH2 = 'OAUTH2'


class SharePointVersion(Enum):
    SHAREPOINT_2013 = 'SHAREPOINT_2013'
    SHAREPOINT_2016 = 'SHAREPOINT_2016'
    SHAREPOINT_ONLINE = 'SHAREPOINT_ONLINE'
    SHAREPOINT_2019 = 'SHAREPOINT_2019'


class SharedDriveId(
    RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=256)


class SinceCrawlDate(
    RootModel[
        constr(
            pattern=r'(20\d{2})-(0?[1-9]|1[0-2])-(0?[1-9]|1\d|2\d|3[01])',
            min_length=10,
            max_length=10,
        )
    ]
):
    root: constr(
        pattern=r'(20\d{2})-(0?[1-9]|1[0-2])-(0?[1-9]|1\d|2\d|3[01])',
        min_length=10,
        max_length=10,
    )


class SiteId(
    RootModel[constr(pattern=r'^[A-Za-z0-9-]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[A-Za-z0-9-]+$', min_length=1, max_length=128)


class SiteMap(
    RootModel[constr(pattern=r'^(https?):\/\/([^\s]*)', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^(https?):\/\/([^\s]*)', min_length=1, max_length=2048)


class SiteMapsList(RootModel[List[SiteMap]]):
    root: List[SiteMap] = Field(..., max_length=3, min_length=0)


class SiteUrl(
    RootModel[
        constr(pattern=r'^https:\/\/[a-zA-Z0-9_\-\.]+$', min_length=1, max_length=2048)
    ]
):
    root: constr(
        pattern=r'^https:\/\/[a-zA-Z0-9_\-\.]+$', min_length=1, max_length=2048
    )


class SlackEntity(Enum):
    PUBLIC_CHANNEL = 'PUBLIC_CHANNEL'
    PRIVATE_CHANNEL = 'PRIVATE_CHANNEL'
    GROUP_MESSAGE = 'GROUP_MESSAGE'
    DIRECT_MESSAGE = 'DIRECT_MESSAGE'


class SlackEntityList(RootModel[List[SlackEntity]]):
    root: List[SlackEntity] = Field(..., max_length=4, min_length=1)


class SortOrder(Enum):
    DESC = 'DESC'
    ASC = 'ASC'


class SortingConfiguration(BaseModel):
    DocumentAttributeKey_1: DocumentAttributeKey = Field(
        ..., alias='DocumentAttributeKey'
    )
    SortOrder_1: SortOrder = Field(..., alias='SortOrder')


class SpellCorrectionConfiguration(BaseModel):
    IncludeQuerySpellCheckSuggestions: Boolean


class SqlConfiguration(BaseModel):
    QueryIdentifiersEnclosingOption_1: Optional[QueryIdentifiersEnclosingOption] = (
        Field(None, alias='QueryIdentifiersEnclosingOption')
    )


class StartDataSourceSyncJobRequest(BaseModel):
    Id: DataSourceId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class StopDataSourceSyncJobRequest(BaseModel):
    Id: DataSourceId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class StorageCapacityUnit(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class String(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class StringList(RootModel[List[String]]):
    root: List[String]


class SubnetId(
    RootModel[constr(pattern=r'[\-0-9a-zA-Z]+', min_length=1, max_length=200)]
):
    root: constr(pattern=r'[\-0-9a-zA-Z]+', min_length=1, max_length=200)


class SubnetIdList(RootModel[List[SubnetId]]):
    root: List[SubnetId] = Field(..., max_length=6, min_length=1)


class SuggestedQueryText(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class SuggestionHighlight(BaseModel):
    BeginOffset: Optional[Integer] = None
    EndOffset: Optional[Integer] = None


class SuggestionHighlightList(RootModel[List[SuggestionHighlight]]):
    root: List[SuggestionHighlight]


class SuggestionQueryText(RootModel[constr(pattern=r'^\P{C}*$')]):
    root: constr(pattern=r'^\P{C}*$')


class SuggestionTextWithHighlights(BaseModel):
    Highlights: Optional[SuggestionHighlightList] = None
    Text: Optional[String] = None


class SuggestionValue(BaseModel):
    Text: Optional[SuggestionTextWithHighlights] = None


class TableCell(BaseModel):
    Header: Optional[Boolean] = None
    Highlighted: Optional[Boolean] = None
    TopAnswer: Optional[Boolean] = None
    Value: Optional[String] = None


class TableCellList(RootModel[List[TableCell]]):
    root: List[TableCell]


class TableName(
    RootModel[constr(pattern=r'^[a-zA-Z][a-zA-Z0-9_]*$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^[a-zA-Z][a-zA-Z0-9_]*$', min_length=1, max_length=100)


class TableRow(BaseModel):
    Cells: Optional[TableCellList] = None


class TableRowList(RootModel[List[TableRow]]):
    root: List[TableRow]


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TeamId(RootModel[constr(pattern=r'[A-Z0-9]*', min_length=1, max_length=64)]):
    root: constr(pattern=r'[A-Z0-9]*', min_length=1, max_length=64)


class Template(BaseModel):
    pass


class TemplateConfiguration(BaseModel):
    Template_1: Optional[Template] = Field(None, alias='Template')


class TenantDomain(
    RootModel[
        constr(
            pattern=r'^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\.)+[a-z]{2,}$',
            min_length=1,
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'^([a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\.)+[a-z]{2,}$',
        min_length=1,
        max_length=256,
    )


class TextDocumentStatistics(BaseModel):
    IndexedTextBytes_1: IndexedTextBytes = Field(..., alias='IndexedTextBytes')
    IndexedTextDocumentsCount_1: IndexedTextDocumentsCount = Field(
        ..., alias='IndexedTextDocumentsCount'
    )


class ThesaurusId(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=100)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=100)


class ThesaurusName(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=100)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=100)


class ThesaurusStatus(Enum):
    CREATING = 'CREATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    UPDATING = 'UPDATING'
    ACTIVE_BUT_UPDATE_FAILED = 'ACTIVE_BUT_UPDATE_FAILED'
    FAILED = 'FAILED'


class ThrottlingException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class Title(RootModel[str]):
    root: str


class Token(RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=100000)]):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=100000)


class TopDocumentAttributeValueCountPairsSize(RootModel[conint(ge=0, le=5000)]):
    root: conint(ge=0, le=5000)


class Type(Enum):
    SAAS = 'SAAS'
    ON_PREMISE = 'ON_PREMISE'


class UntagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateAccessControlConfigurationResponse(BaseModel):
    pass


class UpdateFeaturedResultsSetRequest(BaseModel):
    Description: Optional[FeaturedResultsSetDescription] = None
    FeaturedDocuments: Optional[FeaturedDocumentList] = None
    FeaturedResultsSetId_1: FeaturedResultsSetId = Field(
        ..., alias='FeaturedResultsSetId'
    )
    FeaturedResultsSetName_1: Optional[FeaturedResultsSetName] = Field(
        None, alias='FeaturedResultsSetName'
    )
    IndexId_1: IndexId = Field(..., alias='IndexId')
    QueryTexts: Optional[QueryTextList] = None
    Status: Optional[FeaturedResultsSetStatus] = None


class UpdateQuerySuggestionsBlockListRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id: QuerySuggestionsBlockListId
    IndexId_1: IndexId = Field(..., alias='IndexId')
    Name: Optional[QuerySuggestionsBlockListName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    SourceS3Path: Optional[S3Path] = None


class UpdateQuerySuggestionsConfigRequest(BaseModel):
    IncludeQueriesWithoutUserInformation: Optional[ObjectBoolean] = None
    IndexId_1: IndexId = Field(..., alias='IndexId')
    MinimumNumberOfQueryingUsers_1: Optional[MinimumNumberOfQueryingUsers] = Field(
        None, alias='MinimumNumberOfQueryingUsers'
    )
    MinimumQueryCount_1: Optional[MinimumQueryCount] = Field(
        None, alias='MinimumQueryCount'
    )
    Mode_1: Optional[Mode] = Field(None, alias='Mode')
    QueryLogLookBackWindowInDays: Optional[Integer] = None


class UpdateThesaurusRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id: ThesaurusId
    IndexId_1: IndexId = Field(..., alias='IndexId')
    Name: Optional[ThesaurusName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    SourceS3Path: Optional[S3Path] = None


class Url(
    RootModel[
        constr(
            pattern=r'^(https?|ftp|file):\/\/([^\s]*)', min_length=1, max_length=2048
        )
    ]
):
    root: constr(
        pattern=r'^(https?|ftp|file):\/\/([^\s]*)', min_length=1, max_length=2048
    )


class UserAccount(RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=256)]):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=256)


class UserContextPolicy(Enum):
    ATTRIBUTE_FILTER = 'ATTRIBUTE_FILTER'
    USER_TOKEN = 'USER_TOKEN'


class UserGroupResolutionMode(Enum):
    AWS_SSO = 'AWS_SSO'
    NONE = 'NONE'


class UserId(RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=1024)]):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=1024)


class UserIdentityConfiguration(BaseModel):
    IdentityAttributeName_1: Optional[IdentityAttributeName] = Field(
        None, alias='IdentityAttributeName'
    )


class UserNameAttributeField(
    RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=100)


class ValidationException(RootModel[Any]):
    root: Any


class ValueImportanceMap(RootModel[Optional[Dict[str, Importance]]]):
    root: Optional[Dict[str, Importance]] = None


class ValueImportanceMapKey(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class VisitorId(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=256)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=256)


class VpcSecurityGroupId(
    RootModel[constr(pattern=r'[-0-9a-zA-Z]+', min_length=1, max_length=200)]
):
    root: constr(pattern=r'[-0-9a-zA-Z]+', min_length=1, max_length=200)


class WarningCode(Enum):
    QUERY_LANGUAGE_INVALID_SYNTAX = 'QUERY_LANGUAGE_INVALID_SYNTAX'


class WarningMessage(
    RootModel[constr(pattern=r'^\P{C}*$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^\P{C}*$', min_length=1, max_length=2048)


class WebCrawlerMode(Enum):
    HOST_ONLY = 'HOST_ONLY'
    SUBDOMAINS = 'SUBDOMAINS'
    EVERYTHING = 'EVERYTHING'


class XAmzTarget(Enum):
    AWSKendraFrontendService_AssociateEntitiesToExperience = (
        'AWSKendraFrontendService.AssociateEntitiesToExperience'
    )


class XAmzTarget1(Enum):
    AWSKendraFrontendService_AssociatePersonasToEntities = (
        'AWSKendraFrontendService.AssociatePersonasToEntities'
    )


class XAmzTarget2(Enum):
    AWSKendraFrontendService_BatchDeleteDocument = (
        'AWSKendraFrontendService.BatchDeleteDocument'
    )


class XAmzTarget3(Enum):
    AWSKendraFrontendService_BatchDeleteFeaturedResultsSet = (
        'AWSKendraFrontendService.BatchDeleteFeaturedResultsSet'
    )


class XAmzTarget4(Enum):
    AWSKendraFrontendService_BatchGetDocumentStatus = (
        'AWSKendraFrontendService.BatchGetDocumentStatus'
    )


class XAmzTarget5(Enum):
    AWSKendraFrontendService_BatchPutDocument = (
        'AWSKendraFrontendService.BatchPutDocument'
    )


class XAmzTarget6(Enum):
    AWSKendraFrontendService_ClearQuerySuggestions = (
        'AWSKendraFrontendService.ClearQuerySuggestions'
    )


class XAmzTarget7(Enum):
    AWSKendraFrontendService_CreateAccessControlConfiguration = (
        'AWSKendraFrontendService.CreateAccessControlConfiguration'
    )


class XAmzTarget8(Enum):
    AWSKendraFrontendService_CreateDataSource = (
        'AWSKendraFrontendService.CreateDataSource'
    )


class XAmzTarget9(Enum):
    AWSKendraFrontendService_CreateExperience = (
        'AWSKendraFrontendService.CreateExperience'
    )


class XAmzTarget10(Enum):
    AWSKendraFrontendService_CreateFaq = 'AWSKendraFrontendService.CreateFaq'


class XAmzTarget11(Enum):
    AWSKendraFrontendService_CreateFeaturedResultsSet = (
        'AWSKendraFrontendService.CreateFeaturedResultsSet'
    )


class XAmzTarget12(Enum):
    AWSKendraFrontendService_CreateIndex = 'AWSKendraFrontendService.CreateIndex'


class XAmzTarget13(Enum):
    AWSKendraFrontendService_CreateQuerySuggestionsBlockList = (
        'AWSKendraFrontendService.CreateQuerySuggestionsBlockList'
    )


class XAmzTarget14(Enum):
    AWSKendraFrontendService_CreateThesaurus = (
        'AWSKendraFrontendService.CreateThesaurus'
    )


class XAmzTarget15(Enum):
    AWSKendraFrontendService_DeleteAccessControlConfiguration = (
        'AWSKendraFrontendService.DeleteAccessControlConfiguration'
    )


class XAmzTarget16(Enum):
    AWSKendraFrontendService_DeleteDataSource = (
        'AWSKendraFrontendService.DeleteDataSource'
    )


class XAmzTarget17(Enum):
    AWSKendraFrontendService_DeleteExperience = (
        'AWSKendraFrontendService.DeleteExperience'
    )


class XAmzTarget18(Enum):
    AWSKendraFrontendService_DeleteFaq = 'AWSKendraFrontendService.DeleteFaq'


class XAmzTarget19(Enum):
    AWSKendraFrontendService_DeleteIndex = 'AWSKendraFrontendService.DeleteIndex'


class XAmzTarget20(Enum):
    AWSKendraFrontendService_DeletePrincipalMapping = (
        'AWSKendraFrontendService.DeletePrincipalMapping'
    )


class XAmzTarget21(Enum):
    AWSKendraFrontendService_DeleteQuerySuggestionsBlockList = (
        'AWSKendraFrontendService.DeleteQuerySuggestionsBlockList'
    )


class XAmzTarget22(Enum):
    AWSKendraFrontendService_DeleteThesaurus = (
        'AWSKendraFrontendService.DeleteThesaurus'
    )


class XAmzTarget23(Enum):
    AWSKendraFrontendService_DescribeAccessControlConfiguration = (
        'AWSKendraFrontendService.DescribeAccessControlConfiguration'
    )


class XAmzTarget24(Enum):
    AWSKendraFrontendService_DescribeDataSource = (
        'AWSKendraFrontendService.DescribeDataSource'
    )


class XAmzTarget25(Enum):
    AWSKendraFrontendService_DescribeExperience = (
        'AWSKendraFrontendService.DescribeExperience'
    )


class XAmzTarget26(Enum):
    AWSKendraFrontendService_DescribeFaq = 'AWSKendraFrontendService.DescribeFaq'


class XAmzTarget27(Enum):
    AWSKendraFrontendService_DescribeFeaturedResultsSet = (
        'AWSKendraFrontendService.DescribeFeaturedResultsSet'
    )


class XAmzTarget28(Enum):
    AWSKendraFrontendService_DescribeIndex = 'AWSKendraFrontendService.DescribeIndex'


class XAmzTarget29(Enum):
    AWSKendraFrontendService_DescribePrincipalMapping = (
        'AWSKendraFrontendService.DescribePrincipalMapping'
    )


class XAmzTarget30(Enum):
    AWSKendraFrontendService_DescribeQuerySuggestionsBlockList = (
        'AWSKendraFrontendService.DescribeQuerySuggestionsBlockList'
    )


class XAmzTarget31(Enum):
    AWSKendraFrontendService_DescribeQuerySuggestionsConfig = (
        'AWSKendraFrontendService.DescribeQuerySuggestionsConfig'
    )


class XAmzTarget32(Enum):
    AWSKendraFrontendService_DescribeThesaurus = (
        'AWSKendraFrontendService.DescribeThesaurus'
    )


class XAmzTarget33(Enum):
    AWSKendraFrontendService_DisassociateEntitiesFromExperience = (
        'AWSKendraFrontendService.DisassociateEntitiesFromExperience'
    )


class XAmzTarget34(Enum):
    AWSKendraFrontendService_DisassociatePersonasFromEntities = (
        'AWSKendraFrontendService.DisassociatePersonasFromEntities'
    )


class XAmzTarget35(Enum):
    AWSKendraFrontendService_GetQuerySuggestions = (
        'AWSKendraFrontendService.GetQuerySuggestions'
    )


class XAmzTarget36(Enum):
    AWSKendraFrontendService_GetSnapshots = 'AWSKendraFrontendService.GetSnapshots'


class XAmzTarget37(Enum):
    AWSKendraFrontendService_ListAccessControlConfigurations = (
        'AWSKendraFrontendService.ListAccessControlConfigurations'
    )


class XAmzTarget38(Enum):
    AWSKendraFrontendService_ListDataSourceSyncJobs = (
        'AWSKendraFrontendService.ListDataSourceSyncJobs'
    )


class XAmzTarget39(Enum):
    AWSKendraFrontendService_ListDataSources = (
        'AWSKendraFrontendService.ListDataSources'
    )


class XAmzTarget40(Enum):
    AWSKendraFrontendService_ListEntityPersonas = (
        'AWSKendraFrontendService.ListEntityPersonas'
    )


class XAmzTarget41(Enum):
    AWSKendraFrontendService_ListExperienceEntities = (
        'AWSKendraFrontendService.ListExperienceEntities'
    )


class XAmzTarget42(Enum):
    AWSKendraFrontendService_ListExperiences = (
        'AWSKendraFrontendService.ListExperiences'
    )


class XAmzTarget43(Enum):
    AWSKendraFrontendService_ListFaqs = 'AWSKendraFrontendService.ListFaqs'


class XAmzTarget44(Enum):
    AWSKendraFrontendService_ListFeaturedResultsSets = (
        'AWSKendraFrontendService.ListFeaturedResultsSets'
    )


class XAmzTarget45(Enum):
    AWSKendraFrontendService_ListGroupsOlderThanOrderingId = (
        'AWSKendraFrontendService.ListGroupsOlderThanOrderingId'
    )


class XAmzTarget46(Enum):
    AWSKendraFrontendService_ListIndices = 'AWSKendraFrontendService.ListIndices'


class XAmzTarget47(Enum):
    AWSKendraFrontendService_ListQuerySuggestionsBlockLists = (
        'AWSKendraFrontendService.ListQuerySuggestionsBlockLists'
    )


class XAmzTarget48(Enum):
    AWSKendraFrontendService_ListTagsForResource = (
        'AWSKendraFrontendService.ListTagsForResource'
    )


class XAmzTarget49(Enum):
    AWSKendraFrontendService_ListThesauri = 'AWSKendraFrontendService.ListThesauri'


class XAmzTarget50(Enum):
    AWSKendraFrontendService_PutPrincipalMapping = (
        'AWSKendraFrontendService.PutPrincipalMapping'
    )


class XAmzTarget51(Enum):
    AWSKendraFrontendService_Query = 'AWSKendraFrontendService.Query'


class XAmzTarget52(Enum):
    AWSKendraFrontendService_StartDataSourceSyncJob = (
        'AWSKendraFrontendService.StartDataSourceSyncJob'
    )


class XAmzTarget53(Enum):
    AWSKendraFrontendService_StopDataSourceSyncJob = (
        'AWSKendraFrontendService.StopDataSourceSyncJob'
    )


class XAmzTarget54(Enum):
    AWSKendraFrontendService_SubmitFeedback = 'AWSKendraFrontendService.SubmitFeedback'


class XAmzTarget55(Enum):
    AWSKendraFrontendService_TagResource = 'AWSKendraFrontendService.TagResource'


class XAmzTarget56(Enum):
    AWSKendraFrontendService_UntagResource = 'AWSKendraFrontendService.UntagResource'


class XAmzTarget57(Enum):
    AWSKendraFrontendService_UpdateAccessControlConfiguration = (
        'AWSKendraFrontendService.UpdateAccessControlConfiguration'
    )


class XAmzTarget58(Enum):
    AWSKendraFrontendService_UpdateDataSource = (
        'AWSKendraFrontendService.UpdateDataSource'
    )


class XAmzTarget59(Enum):
    AWSKendraFrontendService_UpdateExperience = (
        'AWSKendraFrontendService.UpdateExperience'
    )


class XAmzTarget60(Enum):
    AWSKendraFrontendService_UpdateFeaturedResultsSet = (
        'AWSKendraFrontendService.UpdateFeaturedResultsSet'
    )


class XAmzTarget61(Enum):
    AWSKendraFrontendService_UpdateIndex = 'AWSKendraFrontendService.UpdateIndex'


class XAmzTarget62(Enum):
    AWSKendraFrontendService_UpdateQuerySuggestionsBlockList = (
        'AWSKendraFrontendService.UpdateQuerySuggestionsBlockList'
    )


class XAmzTarget63(Enum):
    AWSKendraFrontendService_UpdateQuerySuggestionsConfig = (
        'AWSKendraFrontendService.UpdateQuerySuggestionsConfig'
    )


class XAmzTarget64(Enum):
    AWSKendraFrontendService_UpdateThesaurus = (
        'AWSKendraFrontendService.UpdateThesaurus'
    )


class AccessControlListConfiguration(BaseModel):
    KeyPath: Optional[S3ObjectKey] = None


class AclConfiguration(BaseModel):
    AllowedGroupsColumnName: ColumnName


class AssociateEntitiesToExperienceFailedEntityList(RootModel[List[FailedEntity]]):
    root: List[FailedEntity] = Field(..., max_length=20, min_length=1)


class AssociateEntitiesToExperienceResponse(BaseModel):
    FailedEntityList: Optional[AssociateEntitiesToExperienceFailedEntityList] = None


class AssociatePersonasToEntitiesResponse(BaseModel):
    FailedEntityList_1: Optional[FailedEntityList] = Field(
        None, alias='FailedEntityList'
    )


class BasicAuthenticationConfiguration(BaseModel):
    Credentials: SecretArn
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class BasicAuthenticationConfigurationList(
    RootModel[List[BasicAuthenticationConfiguration]]
):
    root: List[BasicAuthenticationConfiguration] = Field(
        ..., max_length=10, min_length=0
    )


class BatchDeleteDocumentRequest(BaseModel):
    DataSourceSyncJobMetricTarget_1: Optional[DataSourceSyncJobMetricTarget] = Field(
        None, alias='DataSourceSyncJobMetricTarget'
    )
    DocumentIdList_1: DocumentIdList = Field(..., alias='DocumentIdList')
    IndexId_1: IndexId = Field(..., alias='IndexId')


class BatchDeleteDocumentResponseFailedDocument(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    Id: Optional[DocumentId] = None


class BatchDeleteDocumentResponseFailedDocuments(
    RootModel[List[BatchDeleteDocumentResponseFailedDocument]]
):
    root: List[BatchDeleteDocumentResponseFailedDocument]


class BatchDeleteFeaturedResultsSetError(BaseModel):
    ErrorCode_1: ErrorCode = Field(..., alias='ErrorCode')
    ErrorMessage_1: ErrorMessage = Field(..., alias='ErrorMessage')
    Id: FeaturedResultsSetId


class BatchDeleteFeaturedResultsSetErrors(
    RootModel[List[BatchDeleteFeaturedResultsSetError]]
):
    root: List[BatchDeleteFeaturedResultsSetError]


class BatchDeleteFeaturedResultsSetRequest(BaseModel):
    FeaturedResultsSetIds: FeaturedResultsSetIdList
    IndexId_1: IndexId = Field(..., alias='IndexId')


class BatchDeleteFeaturedResultsSetResponse(BaseModel):
    Errors: BatchDeleteFeaturedResultsSetErrors


class BatchGetDocumentStatusResponseError(BaseModel):
    DocumentId_1: Optional[DocumentId] = Field(None, alias='DocumentId')
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')


class BatchGetDocumentStatusResponseErrors(
    RootModel[List[BatchGetDocumentStatusResponseError]]
):
    root: List[BatchGetDocumentStatusResponseError]


class BatchPutDocumentResponseFailedDocument(BaseModel):
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    Id: Optional[DocumentId] = None


class BatchPutDocumentResponseFailedDocuments(
    RootModel[List[BatchPutDocumentResponseFailedDocument]]
):
    root: List[BatchPutDocumentResponseFailedDocument]


class CapacityUnitsConfiguration(BaseModel):
    QueryCapacityUnits: QueryCapacityUnit
    StorageCapacityUnits: StorageCapacityUnit


class ChangeDetectingColumns(RootModel[List[ColumnName]]):
    root: List[ColumnName] = Field(..., max_length=5, min_length=1)


class ClearQuerySuggestionsRequest(BaseModel):
    IndexId_1: IndexId = Field(..., alias='IndexId')


class ClickFeedback(BaseModel):
    ClickTime: Timestamp
    ResultId_1: ResultId = Field(..., alias='ResultId')


class ClickFeedbackList(RootModel[List[ClickFeedback]]):
    root: List[ClickFeedback]


class ConfluenceAttachmentToIndexFieldMapping(BaseModel):
    DataSourceFieldName: Optional[ConfluenceAttachmentFieldName] = None
    DateFieldFormat: Optional[DataSourceDateFieldFormat] = None
    IndexFieldName_1: Optional[IndexFieldName] = Field(None, alias='IndexFieldName')


class ConfluenceBlogToIndexFieldMapping(BaseModel):
    DataSourceFieldName: Optional[ConfluenceBlogFieldName] = None
    DateFieldFormat: Optional[DataSourceDateFieldFormat] = None
    IndexFieldName_1: Optional[IndexFieldName] = Field(None, alias='IndexFieldName')


class ConfluencePageToIndexFieldMapping(BaseModel):
    DataSourceFieldName: Optional[ConfluencePageFieldName] = None
    DateFieldFormat: Optional[DataSourceDateFieldFormat] = None
    IndexFieldName_1: Optional[IndexFieldName] = Field(None, alias='IndexFieldName')


class ConfluenceSpaceToIndexFieldMapping(BaseModel):
    DataSourceFieldName: Optional[ConfluenceSpaceFieldName] = None
    DateFieldFormat: Optional[DataSourceDateFieldFormat] = None
    IndexFieldName_1: Optional[IndexFieldName] = Field(None, alias='IndexFieldName')


class ConnectionConfiguration(BaseModel):
    DatabaseHost_1: DatabaseHost = Field(..., alias='DatabaseHost')
    DatabaseName_1: DatabaseName = Field(..., alias='DatabaseName')
    DatabasePort_1: DatabasePort = Field(..., alias='DatabasePort')
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')
    TableName_1: TableName = Field(..., alias='TableName')


class ContentSourceConfiguration(BaseModel):
    DataSourceIds: Optional[DataSourceIdList] = None
    DirectPutContent: Optional[Boolean] = None
    FaqIds: Optional[FaqIdsList] = None


class Correction(BaseModel):
    BeginOffset: Optional[Integer] = None
    CorrectedTerm: Optional[String] = None
    EndOffset: Optional[Integer] = None
    Term: Optional[String] = None


class CorrectionList(RootModel[List[Correction]]):
    root: List[Correction]


class CreateDataSourceResponse(BaseModel):
    Id: DataSourceId


class CreateExperienceResponse(BaseModel):
    Id: ExperienceId


class CreateFaqResponse(BaseModel):
    Id: Optional[FaqId] = None


class CreateIndexResponse(BaseModel):
    Id: Optional[IndexId] = None


class CreateQuerySuggestionsBlockListResponse(BaseModel):
    Id: Optional[QuerySuggestionsBlockListId] = None


class CreateThesaurusResponse(BaseModel):
    Id: Optional[ThesaurusId] = None


class DataSourceGroup(BaseModel):
    DataSourceId_1: DataSourceId = Field(..., alias='DataSourceId')
    GroupId: PrincipalName


class DataSourceGroups(RootModel[List[DataSourceGroup]]):
    root: List[DataSourceGroup] = Field(..., max_length=2048, min_length=1)


class DataSourceInclusionsExclusionsStrings(
    RootModel[List[DataSourceInclusionsExclusionsStringsMember]]
):
    root: List[DataSourceInclusionsExclusionsStringsMember] = Field(
        ..., max_length=100, min_length=0
    )


class DataSourceSummary(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    Id: Optional[DataSourceId] = None
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Name: Optional[DataSourceName] = None
    Status: Optional[DataSourceStatus] = None
    Type: Optional[DataSourceType] = None
    UpdatedAt: Optional[Timestamp] = None


class DataSourceSummaryList(RootModel[List[DataSourceSummary]]):
    root: List[DataSourceSummary]


class DataSourceSyncJobMetrics(BaseModel):
    DocumentsAdded: Optional[MetricValue] = None
    DocumentsDeleted: Optional[MetricValue] = None
    DocumentsFailed: Optional[MetricValue] = None
    DocumentsModified: Optional[MetricValue] = None
    DocumentsScanned: Optional[MetricValue] = None


class DataSourceToIndexFieldMapping(BaseModel):
    DataSourceFieldName_1: DataSourceFieldName = Field(..., alias='DataSourceFieldName')
    DateFieldFormat: Optional[DataSourceDateFieldFormat] = None
    IndexFieldName_1: IndexFieldName = Field(..., alias='IndexFieldName')


class DataSourceToIndexFieldMappingList(RootModel[List[DataSourceToIndexFieldMapping]]):
    root: List[DataSourceToIndexFieldMapping] = Field(..., max_length=100, min_length=1)


class DeleteAccessControlConfigurationRequest(BaseModel):
    Id: AccessControlConfigurationId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DeleteDataSourceRequest(BaseModel):
    Id: DataSourceId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DeleteExperienceRequest(BaseModel):
    Id: ExperienceId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DeleteFaqRequest(BaseModel):
    Id: FaqId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DeleteIndexRequest(BaseModel):
    Id: IndexId


class DeletePrincipalMappingRequest(BaseModel):
    DataSourceId_1: Optional[DataSourceId] = Field(None, alias='DataSourceId')
    GroupId_1: GroupId = Field(..., alias='GroupId')
    IndexId_1: IndexId = Field(..., alias='IndexId')
    OrderingId: Optional[PrincipalOrderingId] = None


class DeleteQuerySuggestionsBlockListRequest(BaseModel):
    Id: QuerySuggestionsBlockListId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DeleteThesaurusRequest(BaseModel):
    Id: ThesaurusId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DescribeAccessControlConfigurationRequest(BaseModel):
    Id: AccessControlConfigurationId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DescribeDataSourceRequest(BaseModel):
    Id: DataSourceId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DescribeExperienceRequest(BaseModel):
    Id: ExperienceId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DescribeFaqRequest(BaseModel):
    Id: FaqId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DescribeFaqResponse(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    FileFormat: Optional[FaqFileFormat] = None
    Id: Optional[FaqId] = None
    IndexId_1: Optional[IndexId] = Field(None, alias='IndexId')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Name: Optional[FaqName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    S3Path_1: Optional[S3Path] = Field(None, alias='S3Path')
    Status: Optional[FaqStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class DescribeFeaturedResultsSetRequest(BaseModel):
    FeaturedResultsSetId_1: FeaturedResultsSetId = Field(
        ..., alias='FeaturedResultsSetId'
    )
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DescribeIndexRequest(BaseModel):
    Id: IndexId


class DescribePrincipalMappingRequest(BaseModel):
    DataSourceId_1: Optional[DataSourceId] = Field(None, alias='DataSourceId')
    GroupId_1: GroupId = Field(..., alias='GroupId')
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DescribeQuerySuggestionsBlockListRequest(BaseModel):
    Id: QuerySuggestionsBlockListId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DescribeQuerySuggestionsBlockListResponse(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    FileSizeBytes: Optional[Long] = None
    Id: Optional[QuerySuggestionsBlockListId] = None
    IndexId_1: Optional[IndexId] = Field(None, alias='IndexId')
    ItemCount: Optional[Integer] = None
    Name: Optional[QuerySuggestionsBlockListName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    SourceS3Path: Optional[S3Path] = None
    Status: Optional[QuerySuggestionsBlockListStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class DescribeQuerySuggestionsConfigRequest(BaseModel):
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DescribeQuerySuggestionsConfigResponse(BaseModel):
    IncludeQueriesWithoutUserInformation: Optional[ObjectBoolean] = None
    LastClearTime: Optional[Timestamp] = None
    LastSuggestionsBuildTime: Optional[Timestamp] = None
    MinimumNumberOfQueryingUsers_1: Optional[MinimumNumberOfQueryingUsers] = Field(
        None, alias='MinimumNumberOfQueryingUsers'
    )
    MinimumQueryCount_1: Optional[MinimumQueryCount] = Field(
        None, alias='MinimumQueryCount'
    )
    Mode_1: Optional[Mode] = Field(None, alias='Mode')
    QueryLogLookBackWindowInDays: Optional[Integer] = None
    Status: Optional[QuerySuggestionsStatus] = None
    TotalSuggestionsCount: Optional[Integer] = None


class DescribeThesaurusRequest(BaseModel):
    Id: ThesaurusId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DescribeThesaurusResponse(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    FileSizeBytes: Optional[Long] = None
    Id: Optional[ThesaurusId] = None
    IndexId_1: Optional[IndexId] = Field(None, alias='IndexId')
    Name: Optional[ThesaurusName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    SourceS3Path: Optional[S3Path] = None
    Status: Optional[ThesaurusStatus] = None
    SynonymRuleCount: Optional[Long] = None
    TermCount: Optional[Long] = None
    UpdatedAt: Optional[Timestamp] = None


class DisassociateEntitiesFromExperienceResponse(BaseModel):
    FailedEntityList_1: Optional[FailedEntityList] = Field(
        None, alias='FailedEntityList'
    )


class DisassociatePersonasFromEntitiesRequest(BaseModel):
    EntityIds: EntityIdsList
    Id: ExperienceId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class DisassociatePersonasFromEntitiesResponse(BaseModel):
    FailedEntityList_1: Optional[FailedEntityList] = Field(
        None, alias='FailedEntityList'
    )


class DocumentAttributeStringListValue(RootModel[List[String]]):
    root: List[String]


class DocumentAttributeValue(BaseModel):
    DateValue: Optional[Timestamp] = None
    LongValue: Optional[Long] = None
    StringListValue: Optional[DocumentAttributeStringListValue] = None
    StringValue: Optional[DocumentAttributeStringValue] = None


class DocumentsMetadataConfiguration(BaseModel):
    S3Prefix: Optional[S3ObjectKey] = None


class EntityConfiguration(BaseModel):
    EntityId_1: EntityId = Field(..., alias='EntityId')
    EntityType_1: EntityType = Field(..., alias='EntityType')


class EntityDisplayData(BaseModel):
    FirstName: Optional[NameType] = None
    GroupName: Optional[NameType] = None
    IdentifiedUserName: Optional[NameType] = None
    LastName: Optional[NameType] = None
    UserName: Optional[NameType] = None


class EntityPersonaConfiguration(BaseModel):
    EntityId_1: EntityId = Field(..., alias='EntityId')
    Persona_1: Persona = Field(..., alias='Persona')


class EntityPersonaConfigurationList(RootModel[List[EntityPersonaConfiguration]]):
    root: List[EntityPersonaConfiguration] = Field(..., max_length=25, min_length=1)


class ExcludeMimeTypesList(RootModel[List[MimeType]]):
    root: List[MimeType] = Field(..., max_length=30, min_length=0)


class ExcludeSharedDrivesList(RootModel[List[SharedDriveId]]):
    root: List[SharedDriveId] = Field(..., max_length=100, min_length=0)


class ExcludeUserAccountsList(RootModel[List[UserAccount]]):
    root: List[UserAccount] = Field(..., max_length=100, min_length=0)


class ExperienceConfiguration(BaseModel):
    ContentSourceConfiguration_1: Optional[ContentSourceConfiguration] = Field(
        None, alias='ContentSourceConfiguration'
    )
    UserIdentityConfiguration_1: Optional[UserIdentityConfiguration] = Field(
        None, alias='UserIdentityConfiguration'
    )


class ExperienceEntitiesSummary(BaseModel):
    DisplayData: Optional[EntityDisplayData] = None
    EntityId_1: Optional[EntityId] = Field(None, alias='EntityId')
    EntityType_1: Optional[EntityType] = Field(None, alias='EntityType')


class ExperienceEntitiesSummaryList(RootModel[List[ExperienceEntitiesSummary]]):
    root: List[ExperienceEntitiesSummary]


class ExperiencesSummary(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    Endpoints: Optional[ExperienceEndpoints] = None
    Id: Optional[ExperienceId] = None
    Name: Optional[ExperienceName] = None
    Status: Optional[ExperienceStatus] = None


class ExperiencesSummaryList(RootModel[List[ExperiencesSummary]]):
    root: List[ExperiencesSummary]


class FaqStatistics(BaseModel):
    IndexedQuestionAnswersCount_1: IndexedQuestionAnswersCount = Field(
        ..., alias='IndexedQuestionAnswersCount'
    )


class FaqSummary(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    FileFormat: Optional[FaqFileFormat] = None
    Id: Optional[FaqId] = None
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Name: Optional[FaqName] = None
    Status: Optional[FaqStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class FaqSummaryItems(RootModel[List[FaqSummary]]):
    root: List[FaqSummary]


class FeaturedDocumentWithMetadata(BaseModel):
    Id: Optional[DocumentId] = None
    Title: Optional[String] = None
    URI: Optional[Url] = None


class FeaturedDocumentWithMetadataList(RootModel[List[FeaturedDocumentWithMetadata]]):
    root: List[FeaturedDocumentWithMetadata]


class FeaturedResultsSet(BaseModel):
    CreationTimestamp: Optional[Long] = None
    Description: Optional[FeaturedResultsSetDescription] = None
    FeaturedDocuments: Optional[FeaturedDocumentList] = None
    FeaturedResultsSetId_1: Optional[FeaturedResultsSetId] = Field(
        None, alias='FeaturedResultsSetId'
    )
    FeaturedResultsSetName_1: Optional[FeaturedResultsSetName] = Field(
        None, alias='FeaturedResultsSetName'
    )
    LastUpdatedTimestamp: Optional[Long] = None
    QueryTexts: Optional[QueryTextList] = None
    Status: Optional[FeaturedResultsSetStatus] = None


class FeaturedResultsSetSummary(BaseModel):
    CreationTimestamp: Optional[Long] = None
    FeaturedResultsSetId_1: Optional[FeaturedResultsSetId] = Field(
        None, alias='FeaturedResultsSetId'
    )
    FeaturedResultsSetName_1: Optional[FeaturedResultsSetName] = Field(
        None, alias='FeaturedResultsSetName'
    )
    LastUpdatedTimestamp: Optional[Long] = None
    Status: Optional[FeaturedResultsSetStatus] = None


class FeaturedResultsSetSummaryItems(RootModel[List[FeaturedResultsSetSummary]]):
    root: List[FeaturedResultsSetSummary]


class GetQuerySuggestionsRequest(BaseModel):
    IndexId_1: IndexId = Field(..., alias='IndexId')
    MaxSuggestionsCount: Optional[Integer] = None
    QueryText: SuggestionQueryText


class GetSnapshotsRequest(BaseModel):
    IndexId_1: IndexId = Field(..., alias='IndexId')
    Interval_1: Interval = Field(..., alias='Interval')
    MaxResults: Optional[Integer] = None
    MetricType_1: MetricType = Field(..., alias='MetricType')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GoogleDriveConfiguration(BaseModel):
    ExcludeMimeTypes: Optional[ExcludeMimeTypesList] = None
    ExcludeSharedDrives: Optional[ExcludeSharedDrivesList] = None
    ExcludeUserAccounts: Optional[ExcludeUserAccountsList] = None
    ExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    InclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')


class GroupOrderingIdSummary(BaseModel):
    FailureReason_1: Optional[FailureReason] = Field(None, alias='FailureReason')
    LastUpdatedAt: Optional[Timestamp] = None
    OrderingId: Optional[PrincipalOrderingId] = None
    ReceivedAt: Optional[Timestamp] = None
    Status: Optional[PrincipalMappingStatus] = None


class GroupSummary(BaseModel):
    GroupId_1: Optional[GroupId] = Field(None, alias='GroupId')
    OrderingId: Optional[PrincipalOrderingId] = None


class Groups(RootModel[List[PrincipalName]]):
    root: List[PrincipalName] = Field(..., max_length=2048, min_length=1)


class Highlight(BaseModel):
    BeginOffset: Integer
    EndOffset: Integer
    TopAnswer: Optional[Boolean] = None
    Type: Optional[HighlightType] = None


class HighlightList(RootModel[List[Highlight]]):
    root: List[Highlight]


class IndexConfigurationSummary(BaseModel):
    CreatedAt: Timestamp
    Edition: Optional[IndexEdition] = None
    Id: Optional[IndexId] = None
    Name: Optional[IndexName] = None
    Status: IndexStatus
    UpdatedAt: Timestamp


class IndexConfigurationSummaryList(RootModel[List[IndexConfigurationSummary]]):
    root: List[IndexConfigurationSummary]


class IndexStatistics(BaseModel):
    FaqStatistics_1: FaqStatistics = Field(..., alias='FaqStatistics')
    TextDocumentStatistics_1: TextDocumentStatistics = Field(
        ..., alias='TextDocumentStatistics'
    )


class IssueType(RootModel[List[String]]):
    root: List[String]


class JiraStatus(RootModel[List[String]]):
    root: List[String]


class JsonTokenTypeConfiguration(BaseModel):
    GroupAttributeField: String
    UserNameAttributeField: String


class JwtTokenTypeConfiguration(BaseModel):
    ClaimRegex_1: Optional[ClaimRegex] = Field(None, alias='ClaimRegex')
    GroupAttributeField_1: Optional[GroupAttributeField] = Field(
        None, alias='GroupAttributeField'
    )
    Issuer_1: Optional[Issuer] = Field(None, alias='Issuer')
    KeyLocation_1: KeyLocation = Field(..., alias='KeyLocation')
    SecretManagerArn: Optional[RoleArn] = None
    URL: Optional[Url] = None
    UserNameAttributeField_1: Optional[UserNameAttributeField] = Field(
        None, alias='UserNameAttributeField'
    )


class ListAccessControlConfigurationsRequest(BaseModel):
    IndexId_1: IndexId = Field(..., alias='IndexId')
    MaxResults: Optional[MaxResultsIntegerForListAccessControlConfigurationsRequest] = (
        None
    )
    NextToken: Optional[String] = None


class ListAccessControlConfigurationsResponse(BaseModel):
    AccessControlConfigurations: AccessControlConfigurationSummaryList
    NextToken: Optional[String] = None


class ListDataSourcesRequest(BaseModel):
    IndexId_1: IndexId = Field(..., alias='IndexId')
    MaxResults: Optional[MaxResultsIntegerForListDataSourcesRequest] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListDataSourcesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SummaryItems: Optional[DataSourceSummaryList] = None


class ListEntityPersonasRequest(BaseModel):
    Id: ExperienceId
    IndexId_1: IndexId = Field(..., alias='IndexId')
    MaxResults: Optional[MaxResultsIntegerForListEntityPersonasRequest] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListExperienceEntitiesRequest(BaseModel):
    Id: ExperienceId
    IndexId_1: IndexId = Field(..., alias='IndexId')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListExperienceEntitiesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SummaryItems: Optional[ExperienceEntitiesSummaryList] = None


class ListExperiencesRequest(BaseModel):
    IndexId_1: IndexId = Field(..., alias='IndexId')
    MaxResults: Optional[MaxResultsIntegerForListExperiencesRequest] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListExperiencesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SummaryItems: Optional[ExperiencesSummaryList] = None


class ListFaqsRequest(BaseModel):
    IndexId_1: IndexId = Field(..., alias='IndexId')
    MaxResults: Optional[MaxResultsIntegerForListFaqsRequest] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFaqsResponse(BaseModel):
    FaqSummaryItems_1: Optional[FaqSummaryItems] = Field(None, alias='FaqSummaryItems')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFeaturedResultsSetsRequest(BaseModel):
    IndexId_1: IndexId = Field(..., alias='IndexId')
    MaxResults: Optional[MaxResultsIntegerForListFeaturedResultsSetsRequest] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListFeaturedResultsSetsResponse(BaseModel):
    FeaturedResultsSetSummaryItems_1: Optional[FeaturedResultsSetSummaryItems] = Field(
        None, alias='FeaturedResultsSetSummaryItems'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListGroupsOlderThanOrderingIdRequest(BaseModel):
    DataSourceId_1: Optional[DataSourceId] = Field(None, alias='DataSourceId')
    IndexId_1: IndexId = Field(..., alias='IndexId')
    MaxResults: Optional[MaxResultsIntegerForListPrincipalsRequest] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    OrderingId: PrincipalOrderingId


class ListIndicesRequest(BaseModel):
    MaxResults: Optional[MaxResultsIntegerForListIndicesRequest] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListIndicesResponse(BaseModel):
    IndexConfigurationSummaryItems: Optional[IndexConfigurationSummaryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListOfGroupSummaries(RootModel[List[GroupSummary]]):
    root: List[GroupSummary]


class ListQuerySuggestionsBlockListsRequest(BaseModel):
    IndexId_1: IndexId = Field(..., alias='IndexId')
    MaxResults: Optional[MaxResultsIntegerForListQuerySuggestionsBlockLists] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListThesauriRequest(BaseModel):
    IndexId_1: IndexId = Field(..., alias='IndexId')
    MaxResults: Optional[MaxResultsIntegerForListThesauriRequest] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class MemberUser(BaseModel):
    UserId_1: UserId = Field(..., alias='UserId')


class MemberUsers(RootModel[List[MemberUser]]):
    root: List[MemberUser] = Field(..., max_length=1000, min_length=1)


class OnPremiseConfiguration(BaseModel):
    HostUrl: Url
    OrganizationName_1: OrganizationName = Field(..., alias='OrganizationName')
    SslCertificateS3Path: S3Path


class OneDriveUsers(BaseModel):
    OneDriveUserList_1: Optional[OneDriveUserList] = Field(
        None, alias='OneDriveUserList'
    )
    OneDriveUserS3Path: Optional[S3Path] = None


class PersonasSummary(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    EntityId_1: Optional[EntityId] = Field(None, alias='EntityId')
    Persona_1: Optional[Persona] = Field(None, alias='Persona')
    UpdatedAt: Optional[Timestamp] = None


class PersonasSummaryList(RootModel[List[PersonasSummary]]):
    root: List[PersonasSummary]


class Principal(BaseModel):
    Access: ReadAccessType
    DataSourceId_1: Optional[DataSourceId] = Field(None, alias='DataSourceId')
    Name: PrincipalName
    Type: PrincipalType


class PrincipalList(RootModel[List[Principal]]):
    root: List[Principal]


class PrivateChannelFilter(RootModel[List[String]]):
    root: List[String]


class Project(RootModel[List[String]]):
    root: List[String]


class ProxyConfiguration(BaseModel):
    Credentials: Optional[SecretArn] = None
    Host_1: Host = Field(..., alias='Host')
    Port_1: Port = Field(..., alias='Port')


class PublicChannelFilter(RootModel[List[String]]):
    root: List[String]


class QuerySuggestionsBlockListSummary(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    Id: Optional[QuerySuggestionsBlockListId] = None
    ItemCount: Optional[Integer] = None
    Name: Optional[QuerySuggestionsBlockListName] = None
    Status: Optional[QuerySuggestionsBlockListStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class QuerySuggestionsBlockListSummaryItems(
    RootModel[List[QuerySuggestionsBlockListSummary]]
):
    root: List[QuerySuggestionsBlockListSummary]


class Relevance(BaseModel):
    Duration_1: Optional[Duration] = Field(None, alias='Duration')
    Freshness: Optional[DocumentMetadataBoolean] = None
    Importance_1: Optional[Importance] = Field(None, alias='Importance')
    RankOrder: Optional[Order] = None
    ValueImportanceMap_1: Optional[ValueImportanceMap] = Field(
        None, alias='ValueImportanceMap'
    )


class RelevanceFeedback(BaseModel):
    RelevanceValue: RelevanceType
    ResultId_1: ResultId = Field(..., alias='ResultId')


class RelevanceFeedbackList(RootModel[List[RelevanceFeedback]]):
    root: List[RelevanceFeedback]


class S3DataSourceConfiguration(BaseModel):
    AccessControlListConfiguration_1: Optional[AccessControlListConfiguration] = Field(
        None, alias='AccessControlListConfiguration'
    )
    BucketName: S3BucketName
    DocumentsMetadataConfiguration_1: Optional[DocumentsMetadataConfiguration] = Field(
        None, alias='DocumentsMetadataConfiguration'
    )
    ExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    InclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    InclusionPrefixes: Optional[DataSourceInclusionsExclusionsStrings] = None


class SaaSConfiguration(BaseModel):
    HostUrl: Url
    OrganizationName_1: OrganizationName = Field(..., alias='OrganizationName')


class SalesforceChatterFeedConfiguration(BaseModel):
    DocumentDataFieldName: DataSourceFieldName
    DocumentTitleFieldName: Optional[DataSourceFieldName] = None
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    IncludeFilterTypes: Optional[SalesforceChatterFeedIncludeFilterTypes] = None


class SalesforceCustomKnowledgeArticleTypeConfiguration(BaseModel):
    DocumentDataFieldName: DataSourceFieldName
    DocumentTitleFieldName: Optional[DataSourceFieldName] = None
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    Name: SalesforceCustomKnowledgeArticleTypeName


class SalesforceCustomKnowledgeArticleTypeConfigurationList(
    RootModel[List[SalesforceCustomKnowledgeArticleTypeConfiguration]]
):
    root: List[SalesforceCustomKnowledgeArticleTypeConfiguration] = Field(
        ..., max_length=10, min_length=1
    )


class SalesforceStandardKnowledgeArticleTypeConfiguration(BaseModel):
    DocumentDataFieldName: DataSourceFieldName
    DocumentTitleFieldName: Optional[DataSourceFieldName] = None
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None


class SalesforceStandardObjectAttachmentConfiguration(BaseModel):
    DocumentTitleFieldName: Optional[DataSourceFieldName] = None
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None


class SalesforceStandardObjectConfiguration(BaseModel):
    DocumentDataFieldName: DataSourceFieldName
    DocumentTitleFieldName: Optional[DataSourceFieldName] = None
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    Name: SalesforceStandardObjectName


class SalesforceStandardObjectConfigurationList(
    RootModel[List[SalesforceStandardObjectConfiguration]]
):
    root: List[SalesforceStandardObjectConfiguration] = Field(
        ..., max_length=17, min_length=1
    )


class ScoreAttributes(BaseModel):
    ScoreConfidence_1: Optional[ScoreConfidence] = Field(None, alias='ScoreConfidence')


class SecurityGroupIdList(RootModel[List[VpcSecurityGroupId]]):
    root: List[VpcSecurityGroupId] = Field(..., max_length=10, min_length=1)


class SeedUrlConfiguration(BaseModel):
    SeedUrls: SeedUrlList
    WebCrawlerMode_1: Optional[WebCrawlerMode] = Field(None, alias='WebCrawlerMode')


class ServiceNowKnowledgeArticleConfiguration(BaseModel):
    CrawlAttachments: Optional[Boolean] = None
    DocumentDataFieldName: DataSourceFieldName
    DocumentTitleFieldName: Optional[DataSourceFieldName] = None
    ExcludeAttachmentFilePatterns: Optional[DataSourceInclusionsExclusionsStrings] = (
        None
    )
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    FilterQuery: Optional[ServiceNowKnowledgeArticleFilterQuery] = None
    IncludeAttachmentFilePatterns: Optional[DataSourceInclusionsExclusionsStrings] = (
        None
    )


class ServiceNowServiceCatalogConfiguration(BaseModel):
    CrawlAttachments: Optional[Boolean] = None
    DocumentDataFieldName: DataSourceFieldName
    DocumentTitleFieldName: Optional[DataSourceFieldName] = None
    ExcludeAttachmentFilePatterns: Optional[DataSourceInclusionsExclusionsStrings] = (
        None
    )
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    IncludeAttachmentFilePatterns: Optional[DataSourceInclusionsExclusionsStrings] = (
        None
    )


class SharePointUrlList(RootModel[List[Url]]):
    root: List[Url] = Field(..., max_length=100, min_length=1)


class SiteMapsConfiguration(BaseModel):
    SiteMaps: SiteMapsList


class SnapshotsDataHeaderFields(RootModel[List[String]]):
    root: List[String]


class SnapshotsDataRecord(RootModel[List[String]]):
    root: List[String]


class SnapshotsDataRecords(RootModel[List[SnapshotsDataRecord]]):
    root: List[SnapshotsDataRecord]


class SpellCorrectedQuery(BaseModel):
    Corrections: Optional[CorrectionList] = None
    SuggestedQueryText_1: Optional[SuggestedQueryText] = Field(
        None, alias='SuggestedQueryText'
    )


class SpellCorrectedQueryList(RootModel[List[SpellCorrectedQuery]]):
    root: List[SpellCorrectedQuery]


class StartDataSourceSyncJobResponse(BaseModel):
    ExecutionId: Optional[String] = None


class Status(BaseModel):
    DocumentId_1: Optional[DocumentId] = Field(None, alias='DocumentId')
    DocumentStatus_1: Optional[DocumentStatus] = Field(None, alias='DocumentStatus')
    FailureCode: Optional[String] = None
    FailureReason: Optional[String] = None


class SubmitFeedbackRequest(BaseModel):
    ClickFeedbackItems: Optional[ClickFeedbackList] = None
    IndexId_1: IndexId = Field(..., alias='IndexId')
    QueryId_1: QueryId = Field(..., alias='QueryId')
    RelevanceFeedbackItems: Optional[RelevanceFeedbackList] = None


class Suggestion(BaseModel):
    Id: Optional[ResultId] = None
    Value: Optional[SuggestionValue] = None


class SuggestionList(RootModel[List[Suggestion]]):
    root: List[Suggestion]


class TableExcerpt(BaseModel):
    Rows: Optional[TableRowList] = None
    TotalNumberOfRows: Optional[Integer] = None


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    ResourceARN: AmazonResourceName
    Tags: TagList


class TextWithHighlights(BaseModel):
    Highlights: Optional[HighlightList] = None
    Text: Optional[String] = None


class ThesaurusSummary(BaseModel):
    CreatedAt: Optional[Timestamp] = None
    Id: Optional[ThesaurusId] = None
    Name: Optional[ThesaurusName] = None
    Status: Optional[ThesaurusStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class ThesaurusSummaryItems(RootModel[List[ThesaurusSummary]]):
    root: List[ThesaurusSummary]


class TimeRange(BaseModel):
    EndTime: Optional[Timestamp] = None
    StartTime: Optional[Timestamp] = None


class UpdateExperienceRequest(BaseModel):
    Configuration: Optional[ExperienceConfiguration] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id: ExperienceId
    IndexId_1: IndexId = Field(..., alias='IndexId')
    Name: Optional[ExperienceName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class UpdateFeaturedResultsSetResponse(BaseModel):
    FeaturedResultsSet_1: Optional[FeaturedResultsSet] = Field(
        None, alias='FeaturedResultsSet'
    )


class Urls(BaseModel):
    SeedUrlConfiguration_1: Optional[SeedUrlConfiguration] = Field(
        None, alias='SeedUrlConfiguration'
    )
    SiteMapsConfiguration_1: Optional[SiteMapsConfiguration] = Field(
        None, alias='SiteMapsConfiguration'
    )


class UserContext(BaseModel):
    DataSourceGroups_1: Optional[DataSourceGroups] = Field(
        None, alias='DataSourceGroups'
    )
    Groups_1: Optional[Groups] = Field(None, alias='Groups')
    Token_1: Optional[Token] = Field(None, alias='Token')
    UserId: Optional[PrincipalName] = None


class UserGroupResolutionConfiguration(BaseModel):
    UserGroupResolutionMode_1: UserGroupResolutionMode = Field(
        ..., alias='UserGroupResolutionMode'
    )


class UserTokenConfiguration(BaseModel):
    JsonTokenTypeConfiguration_1: Optional[JsonTokenTypeConfiguration] = Field(
        None, alias='JsonTokenTypeConfiguration'
    )
    JwtTokenTypeConfiguration_1: Optional[JwtTokenTypeConfiguration] = Field(
        None, alias='JwtTokenTypeConfiguration'
    )


class UserTokenConfigurationList(RootModel[List[UserTokenConfiguration]]):
    root: List[UserTokenConfiguration] = Field(..., max_length=1)


class Warning(BaseModel):
    Code: Optional[WarningCode] = None
    Message: Optional[WarningMessage] = None


class WarningList(RootModel[List[Warning]]):
    root: List[Warning] = Field(..., max_length=1, min_length=1)


class WorkDocsConfiguration(BaseModel):
    CrawlComments: Optional[Boolean] = None
    ExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    InclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    OrganizationId_1: OrganizationId = Field(..., alias='OrganizationId')
    UseChangeLog: Optional[Boolean] = None


class AdditionalResultAttributeValue(BaseModel):
    TextWithHighlightsValue: Optional[TextWithHighlights] = None


class AssociateEntityList(RootModel[List[EntityConfiguration]]):
    root: List[EntityConfiguration] = Field(..., max_length=20, min_length=1)


class AssociatePersonasToEntitiesRequest(BaseModel):
    Id: ExperienceId
    IndexId_1: IndexId = Field(..., alias='IndexId')
    Personas: EntityPersonaConfigurationList


class AuthenticationConfiguration(BaseModel):
    BasicAuthentication: Optional[BasicAuthenticationConfigurationList] = None


class BatchDeleteDocumentResponse(BaseModel):
    FailedDocuments: Optional[BatchDeleteDocumentResponseFailedDocuments] = None


class BatchPutDocumentResponse(BaseModel):
    FailedDocuments: Optional[BatchPutDocumentResponseFailedDocuments] = None


class ColumnConfiguration(BaseModel):
    ChangeDetectingColumns_1: ChangeDetectingColumns = Field(
        ..., alias='ChangeDetectingColumns'
    )
    DocumentDataColumnName: ColumnName
    DocumentIdColumnName: ColumnName
    DocumentTitleColumnName: Optional[ColumnName] = None
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None


class ConfluenceAttachmentFieldMappingsList(
    RootModel[List[ConfluenceAttachmentToIndexFieldMapping]]
):
    root: List[ConfluenceAttachmentToIndexFieldMapping] = Field(
        ..., max_length=11, min_length=1
    )


class ConfluenceBlogFieldMappingsList(
    RootModel[List[ConfluenceBlogToIndexFieldMapping]]
):
    root: List[ConfluenceBlogToIndexFieldMapping] = Field(
        ..., max_length=9, min_length=1
    )


class ConfluencePageFieldMappingsList(
    RootModel[List[ConfluencePageToIndexFieldMapping]]
):
    root: List[ConfluencePageToIndexFieldMapping] = Field(
        ..., max_length=12, min_length=1
    )


class ConfluenceSpaceFieldMappingsList(
    RootModel[List[ConfluenceSpaceToIndexFieldMapping]]
):
    root: List[ConfluenceSpaceToIndexFieldMapping] = Field(
        ..., max_length=4, min_length=1
    )


class CreateExperienceRequest(BaseModel):
    ClientToken: Optional[ClientTokenName] = None
    Configuration: Optional[ExperienceConfiguration] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    IndexId_1: IndexId = Field(..., alias='IndexId')
    Name: ExperienceName
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class CreateFaqRequest(BaseModel):
    ClientToken: Optional[ClientTokenName] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    FileFormat: Optional[FaqFileFormat] = None
    IndexId_1: IndexId = Field(..., alias='IndexId')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Name: FaqName
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    S3Path_1: S3Path = Field(..., alias='S3Path')
    Tags: Optional[TagList] = None


class CreateFeaturedResultsSetRequest(BaseModel):
    ClientToken: Optional[ClientTokenName] = None
    Description: Optional[FeaturedResultsSetDescription] = None
    FeaturedDocuments: Optional[FeaturedDocumentList] = None
    FeaturedResultsSetName_1: FeaturedResultsSetName = Field(
        ..., alias='FeaturedResultsSetName'
    )
    IndexId_1: IndexId = Field(..., alias='IndexId')
    QueryTexts: Optional[QueryTextList] = None
    Status: Optional[FeaturedResultsSetStatus] = None
    Tags: Optional[TagList] = None


class CreateFeaturedResultsSetResponse(BaseModel):
    FeaturedResultsSet_1: Optional[FeaturedResultsSet] = Field(
        None, alias='FeaturedResultsSet'
    )


class CreateIndexRequest(BaseModel):
    ClientToken: Optional[ClientTokenName] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Edition: Optional[IndexEdition] = None
    Name: IndexName
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    ServerSideEncryptionConfiguration_1: Optional[ServerSideEncryptionConfiguration] = (
        Field(None, alias='ServerSideEncryptionConfiguration')
    )
    Tags: Optional[TagList] = None
    UserContextPolicy_1: Optional[UserContextPolicy] = Field(
        None, alias='UserContextPolicy'
    )
    UserGroupResolutionConfiguration_1: Optional[UserGroupResolutionConfiguration] = (
        Field(None, alias='UserGroupResolutionConfiguration')
    )
    UserTokenConfigurations: Optional[UserTokenConfigurationList] = None


class CreateQuerySuggestionsBlockListRequest(BaseModel):
    ClientToken: Optional[ClientTokenName] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    IndexId_1: IndexId = Field(..., alias='IndexId')
    Name: QuerySuggestionsBlockListName
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    SourceS3Path: S3Path
    Tags: Optional[TagList] = None


class CreateThesaurusRequest(BaseModel):
    ClientToken: Optional[ClientTokenName] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    IndexId_1: IndexId = Field(..., alias='IndexId')
    Name: ThesaurusName
    RoleArn_1: RoleArn = Field(..., alias='RoleArn')
    SourceS3Path: S3Path
    Tags: Optional[TagList] = None


class DataSourceSyncJob(BaseModel):
    DataSourceErrorCode: Optional[String] = None
    EndTime: Optional[Timestamp] = None
    ErrorCode_1: Optional[ErrorCode] = Field(None, alias='ErrorCode')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    ExecutionId: Optional[String] = None
    Metrics: Optional[DataSourceSyncJobMetrics] = None
    StartTime: Optional[Timestamp] = None
    Status: Optional[DataSourceSyncJobStatus] = None


class DataSourceSyncJobHistoryList(RootModel[List[DataSourceSyncJob]]):
    root: List[DataSourceSyncJob]


class DataSourceVpcConfiguration(BaseModel):
    SecurityGroupIds: SecurityGroupIdList
    SubnetIds: SubnetIdList


class DatabaseConfiguration(BaseModel):
    AclConfiguration_1: Optional[AclConfiguration] = Field(
        None, alias='AclConfiguration'
    )
    ColumnConfiguration_1: ColumnConfiguration = Field(..., alias='ColumnConfiguration')
    ConnectionConfiguration_1: ConnectionConfiguration = Field(
        ..., alias='ConnectionConfiguration'
    )
    DatabaseEngineType_1: DatabaseEngineType = Field(..., alias='DatabaseEngineType')
    SqlConfiguration_1: Optional[SqlConfiguration] = Field(
        None, alias='SqlConfiguration'
    )
    VpcConfiguration: Optional[DataSourceVpcConfiguration] = None


class DescribeExperienceResponse(BaseModel):
    Configuration: Optional[ExperienceConfiguration] = None
    CreatedAt: Optional[Timestamp] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Endpoints: Optional[ExperienceEndpoints] = None
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    Id: Optional[ExperienceId] = None
    IndexId_1: Optional[IndexId] = Field(None, alias='IndexId')
    Name: Optional[ExperienceName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    Status: Optional[ExperienceStatus] = None
    UpdatedAt: Optional[Timestamp] = None


class DescribeFeaturedResultsSetResponse(BaseModel):
    CreationTimestamp: Optional[Long] = None
    Description: Optional[FeaturedResultsSetDescription] = None
    FeaturedDocumentsMissing: Optional[FeaturedDocumentMissingList] = None
    FeaturedDocumentsWithMetadata: Optional[FeaturedDocumentWithMetadataList] = None
    FeaturedResultsSetId_1: Optional[FeaturedResultsSetId] = Field(
        None, alias='FeaturedResultsSetId'
    )
    FeaturedResultsSetName_1: Optional[FeaturedResultsSetName] = Field(
        None, alias='FeaturedResultsSetName'
    )
    LastUpdatedTimestamp: Optional[Long] = None
    QueryTexts: Optional[QueryTextList] = None
    Status: Optional[FeaturedResultsSetStatus] = None


class DisassociateEntityList(RootModel[List[EntityConfiguration]]):
    root: List[EntityConfiguration] = Field(..., max_length=40, min_length=1)


class DocumentAttribute(BaseModel):
    Key: DocumentAttributeKey
    Value: DocumentAttributeValue


class DocumentAttributeCondition(BaseModel):
    ConditionDocumentAttributeKey: DocumentAttributeKey
    ConditionOnValue: Optional[DocumentAttributeValue] = None
    Operator: ConditionOperator


class DocumentAttributeList(RootModel[List[DocumentAttribute]]):
    root: List[DocumentAttribute]


class DocumentAttributeTarget(BaseModel):
    TargetDocumentAttributeKey: Optional[DocumentAttributeKey] = None
    TargetDocumentAttributeValue: Optional[DocumentAttributeValue] = None
    TargetDocumentAttributeValueDeletion: Optional[Boolean] = None


class DocumentInfo(BaseModel):
    Attributes: Optional[DocumentAttributeList] = None
    DocumentId_1: DocumentId = Field(..., alias='DocumentId')


class DocumentInfoList(RootModel[List[DocumentInfo]]):
    root: List[DocumentInfo] = Field(..., max_length=10, min_length=1)


class DocumentMetadataConfiguration(BaseModel):
    Name: DocumentMetadataConfigurationName
    Relevance_1: Optional[Relevance] = Field(None, alias='Relevance')
    Search_1: Optional[Search] = Field(None, alias='Search')
    Type: DocumentAttributeValueType


class DocumentMetadataConfigurationList(RootModel[List[DocumentMetadataConfiguration]]):
    root: List[DocumentMetadataConfiguration] = Field(..., max_length=500, min_length=0)


class DocumentRelevanceConfiguration(BaseModel):
    Name: DocumentMetadataConfigurationName
    Relevance_1: Relevance = Field(..., alias='Relevance')


class DocumentRelevanceOverrideConfigurationList(
    RootModel[List[DocumentRelevanceConfiguration]]
):
    root: List[DocumentRelevanceConfiguration] = Field(
        ..., max_length=500, min_length=0
    )


class DocumentStatusList(RootModel[List[Status]]):
    root: List[Status]


class FsxConfiguration(BaseModel):
    ExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    FileSystemId_1: FileSystemId = Field(..., alias='FileSystemId')
    FileSystemType: FsxFileSystemType
    InclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    SecretArn_1: Optional[SecretArn] = Field(None, alias='SecretArn')
    VpcConfiguration: DataSourceVpcConfiguration


class GetQuerySuggestionsResponse(BaseModel):
    QuerySuggestionsId_1: Optional[QuerySuggestionsId] = Field(
        None, alias='QuerySuggestionsId'
    )
    Suggestions: Optional[SuggestionList] = None


class GetSnapshotsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SnapShotTimeFilter: Optional[TimeRange] = None
    SnapshotsData: Optional[SnapshotsDataRecords] = None
    SnapshotsDataHeader: Optional[SnapshotsDataHeaderFields] = None


class GitHubConfiguration(BaseModel):
    ExclusionFileNamePatterns: Optional[StringList] = None
    ExclusionFileTypePatterns: Optional[StringList] = None
    ExclusionFolderNamePatterns: Optional[StringList] = None
    GitHubCommitConfigurationFieldMappings: Optional[
        DataSourceToIndexFieldMappingList
    ] = None
    GitHubDocumentCrawlProperties_1: Optional[GitHubDocumentCrawlProperties] = Field(
        None, alias='GitHubDocumentCrawlProperties'
    )
    GitHubIssueAttachmentConfigurationFieldMappings: Optional[
        DataSourceToIndexFieldMappingList
    ] = None
    GitHubIssueCommentConfigurationFieldMappings: Optional[
        DataSourceToIndexFieldMappingList
    ] = None
    GitHubIssueDocumentConfigurationFieldMappings: Optional[
        DataSourceToIndexFieldMappingList
    ] = None
    GitHubPullRequestCommentConfigurationFieldMappings: Optional[
        DataSourceToIndexFieldMappingList
    ] = None
    GitHubPullRequestDocumentAttachmentConfigurationFieldMappings: Optional[
        DataSourceToIndexFieldMappingList
    ] = None
    GitHubPullRequestDocumentConfigurationFieldMappings: Optional[
        DataSourceToIndexFieldMappingList
    ] = None
    GitHubRepositoryConfigurationFieldMappings: Optional[
        DataSourceToIndexFieldMappingList
    ] = None
    InclusionFileNamePatterns: Optional[StringList] = None
    InclusionFileTypePatterns: Optional[StringList] = None
    InclusionFolderNamePatterns: Optional[StringList] = None
    OnPremiseConfiguration_1: Optional[OnPremiseConfiguration] = Field(
        None, alias='OnPremiseConfiguration'
    )
    RepositoryFilter: Optional[RepositoryNames] = None
    SaaSConfiguration_1: Optional[SaaSConfiguration] = Field(
        None, alias='SaaSConfiguration'
    )
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')
    Type_1: Optional[Type] = Field(None, alias='Type')
    UseChangeLog: Optional[Boolean] = None
    VpcConfiguration: Optional[DataSourceVpcConfiguration] = None


class GroupMembers(BaseModel):
    MemberGroups_1: Optional[MemberGroups] = Field(None, alias='MemberGroups')
    MemberUsers_1: Optional[MemberUsers] = Field(None, alias='MemberUsers')
    S3PathforGroupMembers: Optional[S3Path] = None


class GroupOrderingIdSummaries(RootModel[List[GroupOrderingIdSummary]]):
    root: List[GroupOrderingIdSummary] = Field(..., max_length=10)


class HierarchicalPrincipal(BaseModel):
    PrincipalList_1: PrincipalList = Field(..., alias='PrincipalList')


class HierarchicalPrincipalList(RootModel[List[HierarchicalPrincipal]]):
    root: List[HierarchicalPrincipal] = Field(
        ...,
        description='A list of <a href="https://docs.aws.amazon.com/kendra/latest/dg/API_Principal.html">principal</a> lists that define the hierarchy for which documents users should have access to. Each hierarchical list specifies which user or group has allow or deny access for each document.',
        max_length=30,
        min_length=1,
    )


class HookConfiguration(BaseModel):
    InvocationCondition: Optional[DocumentAttributeCondition] = None
    LambdaArn_1: LambdaArn = Field(..., alias='LambdaArn')
    S3Bucket: S3BucketName


class InlineCustomDocumentEnrichmentConfiguration(BaseModel):
    Condition: Optional[DocumentAttributeCondition] = None
    DocumentContentDeletion: Optional[Boolean] = None
    Target: Optional[DocumentAttributeTarget] = None


class InlineCustomDocumentEnrichmentConfigurationList(
    RootModel[List[InlineCustomDocumentEnrichmentConfiguration]]
):
    root: List[InlineCustomDocumentEnrichmentConfiguration] = Field(
        ..., max_length=100, min_length=0
    )


class JiraConfiguration(BaseModel):
    AttachmentFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    CommentFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    ExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    InclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    IssueFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    IssueSubEntityFilter_1: Optional[IssueSubEntityFilter] = Field(
        None, alias='IssueSubEntityFilter'
    )
    IssueType_1: Optional[IssueType] = Field(None, alias='IssueType')
    JiraAccountUrl_1: JiraAccountUrl = Field(..., alias='JiraAccountUrl')
    Project_1: Optional[Project] = Field(None, alias='Project')
    ProjectFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')
    Status: Optional[JiraStatus] = None
    UseChangeLog: Optional[Boolean] = None
    VpcConfiguration: Optional[DataSourceVpcConfiguration] = None
    WorkLogFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None


class ListDataSourceSyncJobsRequest(BaseModel):
    Id: DataSourceId
    IndexId_1: IndexId = Field(..., alias='IndexId')
    MaxResults: Optional[MaxResultsIntegerForListDataSourceSyncJobsRequest] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StartTimeFilter: Optional[TimeRange] = None
    StatusFilter: Optional[DataSourceSyncJobStatus] = None


class ListDataSourceSyncJobsResponse(BaseModel):
    History: Optional[DataSourceSyncJobHistoryList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListEntityPersonasResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SummaryItems: Optional[PersonasSummaryList] = None


class ListGroupsOlderThanOrderingIdResponse(BaseModel):
    GroupsSummaries: Optional[ListOfGroupSummaries] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListQuerySuggestionsBlockListsResponse(BaseModel):
    BlockListSummaryItems: Optional[QuerySuggestionsBlockListSummaryItems] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class ListThesauriResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ThesaurusSummaryItems_1: Optional[ThesaurusSummaryItems] = Field(
        None, alias='ThesaurusSummaryItems'
    )


class OneDriveConfiguration(BaseModel):
    DisableLocalGroups: Optional[Boolean] = None
    ExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    InclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    OneDriveUsers_1: OneDriveUsers = Field(..., alias='OneDriveUsers')
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')
    TenantDomain_1: TenantDomain = Field(..., alias='TenantDomain')


class PutPrincipalMappingRequest(BaseModel):
    DataSourceId_1: Optional[DataSourceId] = Field(None, alias='DataSourceId')
    GroupId_1: GroupId = Field(..., alias='GroupId')
    GroupMembers_1: GroupMembers = Field(..., alias='GroupMembers')
    IndexId_1: IndexId = Field(..., alias='IndexId')
    OrderingId: Optional[PrincipalOrderingId] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class QuipConfiguration(BaseModel):
    AttachmentFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    CrawlAttachments: Optional[Boolean] = None
    CrawlChatRooms: Optional[Boolean] = None
    CrawlFileComments: Optional[Boolean] = None
    Domain_1: Domain = Field(..., alias='Domain')
    ExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    FolderIds: Optional[FolderIdList] = None
    InclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    MessageFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')
    ThreadFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    VpcConfiguration: Optional[DataSourceVpcConfiguration] = None


class SalesforceKnowledgeArticleConfiguration(BaseModel):
    CustomKnowledgeArticleTypeConfigurations: Optional[
        SalesforceCustomKnowledgeArticleTypeConfigurationList
    ] = None
    IncludedStates: SalesforceKnowledgeArticleStateList
    StandardKnowledgeArticleTypeConfiguration: Optional[
        SalesforceStandardKnowledgeArticleTypeConfiguration
    ] = None


class ServiceNowConfiguration(BaseModel):
    AuthenticationType: Optional[ServiceNowAuthenticationType] = None
    HostUrl: ServiceNowHostUrl
    KnowledgeArticleConfiguration: Optional[ServiceNowKnowledgeArticleConfiguration] = (
        None
    )
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')
    ServiceCatalogConfiguration: Optional[ServiceNowServiceCatalogConfiguration] = None
    ServiceNowBuildVersion: ServiceNowBuildVersionType


class SharePointConfiguration(BaseModel):
    AuthenticationType: Optional[SharePointOnlineAuthenticationType] = None
    CrawlAttachments: Optional[Boolean] = None
    DisableLocalGroups: Optional[Boolean] = None
    DocumentTitleFieldName: Optional[DataSourceFieldName] = None
    ExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    InclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    ProxyConfiguration_1: Optional[ProxyConfiguration] = Field(
        None, alias='ProxyConfiguration'
    )
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')
    SharePointVersion_1: SharePointVersion = Field(..., alias='SharePointVersion')
    SslCertificateS3Path: Optional[S3Path] = None
    Urls: SharePointUrlList
    UseChangeLog: Optional[Boolean] = None
    VpcConfiguration: Optional[DataSourceVpcConfiguration] = None


class SlackConfiguration(BaseModel):
    CrawlBotMessage: Optional[Boolean] = None
    ExcludeArchived: Optional[Boolean] = None
    ExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    FieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    InclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    LookBackPeriod_1: Optional[LookBackPeriod] = Field(None, alias='LookBackPeriod')
    PrivateChannelFilter_1: Optional[PrivateChannelFilter] = Field(
        None, alias='PrivateChannelFilter'
    )
    PublicChannelFilter_1: Optional[PublicChannelFilter] = Field(
        None, alias='PublicChannelFilter'
    )
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')
    SinceCrawlDate_1: SinceCrawlDate = Field(..., alias='SinceCrawlDate')
    SlackEntityList_1: SlackEntityList = Field(..., alias='SlackEntityList')
    TeamId_1: TeamId = Field(..., alias='TeamId')
    UseChangeLog: Optional[Boolean] = None
    VpcConfiguration: Optional[DataSourceVpcConfiguration] = None


class UpdateAccessControlConfigurationRequest(BaseModel):
    AccessControlList: Optional[PrincipalList] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    HierarchicalAccessControlList: Optional[HierarchicalPrincipalList] = None
    Id: AccessControlConfigurationId
    IndexId_1: IndexId = Field(..., alias='IndexId')
    Name: Optional[AccessControlConfigurationName] = None


class UpdateIndexRequest(BaseModel):
    CapacityUnits: Optional[CapacityUnitsConfiguration] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    DocumentMetadataConfigurationUpdates: Optional[
        DocumentMetadataConfigurationList
    ] = None
    Id: IndexId
    Name: Optional[IndexName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    UserContextPolicy_1: Optional[UserContextPolicy] = Field(
        None, alias='UserContextPolicy'
    )
    UserGroupResolutionConfiguration_1: Optional[UserGroupResolutionConfiguration] = (
        Field(None, alias='UserGroupResolutionConfiguration')
    )
    UserTokenConfigurations: Optional[UserTokenConfigurationList] = None


class WebCrawlerConfiguration(BaseModel):
    AuthenticationConfiguration_1: Optional[AuthenticationConfiguration] = Field(
        None, alias='AuthenticationConfiguration'
    )
    CrawlDepth_1: Optional[CrawlDepth] = Field(None, alias='CrawlDepth')
    MaxContentSizePerPageInMegaBytes_1: Optional[MaxContentSizePerPageInMegaBytes] = (
        Field(None, alias='MaxContentSizePerPageInMegaBytes')
    )
    MaxLinksPerPage_1: Optional[MaxLinksPerPage] = Field(None, alias='MaxLinksPerPage')
    MaxUrlsPerMinuteCrawlRate_1: Optional[MaxUrlsPerMinuteCrawlRate] = Field(
        None, alias='MaxUrlsPerMinuteCrawlRate'
    )
    ProxyConfiguration_1: Optional[ProxyConfiguration] = Field(
        None, alias='ProxyConfiguration'
    )
    UrlExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    UrlInclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    Urls_1: Urls = Field(..., alias='Urls')


class AdditionalResultAttribute(BaseModel):
    Key: String
    Value: AdditionalResultAttributeValue
    ValueType: AdditionalResultAttributeValueType


class AdditionalResultAttributeList(RootModel[List[AdditionalResultAttribute]]):
    root: List[AdditionalResultAttribute]


class AlfrescoConfiguration(BaseModel):
    BlogFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    CrawlComments: Optional[Boolean] = None
    CrawlSystemFolders: Optional[Boolean] = None
    DocumentLibraryFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    EntityFilter_1: Optional[EntityFilter] = Field(None, alias='EntityFilter')
    ExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    InclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')
    SiteId_1: SiteId = Field(..., alias='SiteId')
    SiteUrl_1: SiteUrl = Field(..., alias='SiteUrl')
    SslCertificateS3Path: S3Path
    VpcConfiguration: Optional[DataSourceVpcConfiguration] = None
    WikiFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None


class AssociateEntitiesToExperienceRequest(BaseModel):
    EntityList: AssociateEntityList
    Id: ExperienceId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class BatchGetDocumentStatusRequest(BaseModel):
    DocumentInfoList_1: DocumentInfoList = Field(..., alias='DocumentInfoList')
    IndexId_1: IndexId = Field(..., alias='IndexId')


class BatchGetDocumentStatusResponse(BaseModel):
    DocumentStatusList_1: Optional[DocumentStatusList] = Field(
        None, alias='DocumentStatusList'
    )
    Errors: Optional[BatchGetDocumentStatusResponseErrors] = None


class BoxConfiguration(BaseModel):
    CommentFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    CrawlComments: Optional[Boolean] = None
    CrawlTasks: Optional[Boolean] = None
    CrawlWebLinks: Optional[Boolean] = None
    EnterpriseId_1: EnterpriseId = Field(..., alias='EnterpriseId')
    ExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    FileFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    InclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')
    TaskFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None
    UseChangeLog: Optional[Boolean] = None
    VpcConfiguration: Optional[DataSourceVpcConfiguration] = None
    WebLinkFieldMappings: Optional[DataSourceToIndexFieldMappingList] = None


class ConfluenceAttachmentConfiguration(BaseModel):
    AttachmentFieldMappings: Optional[ConfluenceAttachmentFieldMappingsList] = None
    CrawlAttachments: Optional[Boolean] = None


class ConfluenceBlogConfiguration(BaseModel):
    BlogFieldMappings: Optional[ConfluenceBlogFieldMappingsList] = None


class ConfluencePageConfiguration(BaseModel):
    PageFieldMappings: Optional[ConfluencePageFieldMappingsList] = None


class ConfluenceSpaceConfiguration(BaseModel):
    CrawlArchivedSpaces: Optional[Boolean] = None
    CrawlPersonalSpaces: Optional[Boolean] = None
    ExcludeSpaces: Optional[ConfluenceSpaceList] = None
    IncludeSpaces: Optional[ConfluenceSpaceList] = None
    SpaceFieldMappings: Optional[ConfluenceSpaceFieldMappingsList] = None


class CreateAccessControlConfigurationRequest(BaseModel):
    AccessControlList: Optional[PrincipalList] = None
    ClientToken: Optional[ClientTokenName] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    HierarchicalAccessControlList: Optional[HierarchicalPrincipalList] = None
    IndexId_1: IndexId = Field(..., alias='IndexId')
    Name: AccessControlConfigurationName


class CustomDocumentEnrichmentConfiguration(BaseModel):
    InlineConfigurations: Optional[InlineCustomDocumentEnrichmentConfigurationList] = (
        None
    )
    PostExtractionHookConfiguration: Optional[HookConfiguration] = None
    PreExtractionHookConfiguration: Optional[HookConfiguration] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class DescribeAccessControlConfigurationResponse(BaseModel):
    AccessControlList: Optional[PrincipalList] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    HierarchicalAccessControlList: Optional[HierarchicalPrincipalList] = None
    Name: AccessControlConfigurationName


class DescribeIndexResponse(BaseModel):
    CapacityUnits: Optional[CapacityUnitsConfiguration] = None
    CreatedAt: Optional[Timestamp] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    DocumentMetadataConfigurations: Optional[DocumentMetadataConfigurationList] = None
    Edition: Optional[IndexEdition] = None
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    Id: Optional[IndexId] = None
    IndexStatistics_1: Optional[IndexStatistics] = Field(None, alias='IndexStatistics')
    Name: Optional[IndexName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    ServerSideEncryptionConfiguration_1: Optional[ServerSideEncryptionConfiguration] = (
        Field(None, alias='ServerSideEncryptionConfiguration')
    )
    Status: Optional[IndexStatus] = None
    UpdatedAt: Optional[Timestamp] = None
    UserContextPolicy_1: Optional[UserContextPolicy] = Field(
        None, alias='UserContextPolicy'
    )
    UserGroupResolutionConfiguration_1: Optional[UserGroupResolutionConfiguration] = (
        Field(None, alias='UserGroupResolutionConfiguration')
    )
    UserTokenConfigurations: Optional[UserTokenConfigurationList] = None


class DescribePrincipalMappingResponse(BaseModel):
    DataSourceId_1: Optional[DataSourceId] = Field(None, alias='DataSourceId')
    GroupId_1: Optional[GroupId] = Field(None, alias='GroupId')
    GroupOrderingIdSummaries_1: Optional[GroupOrderingIdSummaries] = Field(
        None, alias='GroupOrderingIdSummaries'
    )
    IndexId_1: Optional[IndexId] = Field(None, alias='IndexId')


class DisassociateEntitiesFromExperienceRequest(BaseModel):
    EntityList: DisassociateEntityList
    Id: ExperienceId
    IndexId_1: IndexId = Field(..., alias='IndexId')


class Document(BaseModel):
    AccessControlConfigurationId_1: Optional[AccessControlConfigurationId] = Field(
        None, alias='AccessControlConfigurationId'
    )
    AccessControlList: Optional[PrincipalList] = None
    Attributes: Optional[DocumentAttributeList] = None
    Blob_1: Optional[Blob] = Field(None, alias='Blob')
    ContentType_1: Optional[ContentType] = Field(None, alias='ContentType')
    HierarchicalAccessControlList: Optional[HierarchicalPrincipalList] = None
    Id: DocumentId
    S3Path_1: Optional[S3Path] = Field(None, alias='S3Path')
    Title_1: Optional[Title] = Field(None, alias='Title')


class DocumentList(RootModel[List[Document]]):
    root: List[Document] = Field(..., max_length=10, min_length=1)


class FeaturedResultsItem(BaseModel):
    AdditionalAttributes: Optional[AdditionalResultAttributeList] = None
    DocumentAttributes: Optional[DocumentAttributeList] = None
    DocumentExcerpt: Optional[TextWithHighlights] = None
    DocumentId_1: Optional[DocumentId] = Field(None, alias='DocumentId')
    DocumentTitle: Optional[TextWithHighlights] = None
    DocumentURI: Optional[Url] = None
    FeedbackToken_1: Optional[FeedbackToken] = Field(None, alias='FeedbackToken')
    Id: Optional[ResultId] = None
    Type: Optional[QueryResultType] = None


class FeaturedResultsItemList(RootModel[List[FeaturedResultsItem]]):
    root: List[FeaturedResultsItem]


class QueryResultItem(BaseModel):
    AdditionalAttributes: Optional[AdditionalResultAttributeList] = None
    DocumentAttributes: Optional[DocumentAttributeList] = None
    DocumentExcerpt: Optional[TextWithHighlights] = None
    DocumentId_1: Optional[DocumentId] = Field(None, alias='DocumentId')
    DocumentTitle: Optional[TextWithHighlights] = None
    DocumentURI: Optional[Url] = None
    FeedbackToken_1: Optional[FeedbackToken] = Field(None, alias='FeedbackToken')
    Format: Optional[QueryResultFormat] = None
    Id: Optional[ResultId] = None
    ScoreAttributes_1: Optional[ScoreAttributes] = Field(None, alias='ScoreAttributes')
    TableExcerpt_1: Optional[TableExcerpt] = Field(None, alias='TableExcerpt')
    Type: Optional[QueryResultType] = None


class QueryResultItemList(RootModel[List[QueryResultItem]]):
    root: List[QueryResultItem]


class SalesforceConfiguration(BaseModel):
    ChatterFeedConfiguration: Optional[SalesforceChatterFeedConfiguration] = None
    CrawlAttachments: Optional[Boolean] = None
    ExcludeAttachmentFilePatterns: Optional[DataSourceInclusionsExclusionsStrings] = (
        None
    )
    IncludeAttachmentFilePatterns: Optional[DataSourceInclusionsExclusionsStrings] = (
        None
    )
    KnowledgeArticleConfiguration: Optional[SalesforceKnowledgeArticleConfiguration] = (
        None
    )
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')
    ServerUrl: Url
    StandardObjectAttachmentConfiguration: Optional[
        SalesforceStandardObjectAttachmentConfiguration
    ] = None
    StandardObjectConfigurations: Optional[
        SalesforceStandardObjectConfigurationList
    ] = None


class BatchPutDocumentRequest(BaseModel):
    CustomDocumentEnrichmentConfiguration_1: Optional[
        CustomDocumentEnrichmentConfiguration
    ] = Field(None, alias='CustomDocumentEnrichmentConfiguration')
    Documents: DocumentList
    IndexId_1: IndexId = Field(..., alias='IndexId')
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')


class ConfluenceConfiguration(BaseModel):
    AttachmentConfiguration: Optional[ConfluenceAttachmentConfiguration] = None
    AuthenticationType: Optional[ConfluenceAuthenticationType] = None
    BlogConfiguration: Optional[ConfluenceBlogConfiguration] = None
    ExclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    InclusionPatterns: Optional[DataSourceInclusionsExclusionsStrings] = None
    PageConfiguration: Optional[ConfluencePageConfiguration] = None
    ProxyConfiguration_1: Optional[ProxyConfiguration] = Field(
        None, alias='ProxyConfiguration'
    )
    SecretArn_1: SecretArn = Field(..., alias='SecretArn')
    ServerUrl: Url
    SpaceConfiguration: Optional[ConfluenceSpaceConfiguration] = None
    Version: ConfluenceVersion
    VpcConfiguration: Optional[DataSourceVpcConfiguration] = None


class DataSourceConfiguration(BaseModel):
    AlfrescoConfiguration_1: Optional[AlfrescoConfiguration] = Field(
        None, alias='AlfrescoConfiguration'
    )
    BoxConfiguration_1: Optional[BoxConfiguration] = Field(
        None, alias='BoxConfiguration'
    )
    ConfluenceConfiguration_1: Optional[ConfluenceConfiguration] = Field(
        None, alias='ConfluenceConfiguration'
    )
    DatabaseConfiguration_1: Optional[DatabaseConfiguration] = Field(
        None, alias='DatabaseConfiguration'
    )
    FsxConfiguration_1: Optional[FsxConfiguration] = Field(
        None, alias='FsxConfiguration'
    )
    GitHubConfiguration_1: Optional[GitHubConfiguration] = Field(
        None, alias='GitHubConfiguration'
    )
    GoogleDriveConfiguration_1: Optional[GoogleDriveConfiguration] = Field(
        None, alias='GoogleDriveConfiguration'
    )
    JiraConfiguration_1: Optional[JiraConfiguration] = Field(
        None, alias='JiraConfiguration'
    )
    OneDriveConfiguration_1: Optional[OneDriveConfiguration] = Field(
        None, alias='OneDriveConfiguration'
    )
    QuipConfiguration_1: Optional[QuipConfiguration] = Field(
        None, alias='QuipConfiguration'
    )
    S3Configuration: Optional[S3DataSourceConfiguration] = None
    SalesforceConfiguration_1: Optional[SalesforceConfiguration] = Field(
        None, alias='SalesforceConfiguration'
    )
    ServiceNowConfiguration_1: Optional[ServiceNowConfiguration] = Field(
        None, alias='ServiceNowConfiguration'
    )
    SharePointConfiguration_1: Optional[SharePointConfiguration] = Field(
        None, alias='SharePointConfiguration'
    )
    SlackConfiguration_1: Optional[SlackConfiguration] = Field(
        None, alias='SlackConfiguration'
    )
    TemplateConfiguration_1: Optional[TemplateConfiguration] = Field(
        None, alias='TemplateConfiguration'
    )
    WebCrawlerConfiguration_1: Optional[WebCrawlerConfiguration] = Field(
        None, alias='WebCrawlerConfiguration'
    )
    WorkDocsConfiguration_1: Optional[WorkDocsConfiguration] = Field(
        None, alias='WorkDocsConfiguration'
    )


class DescribeDataSourceResponse(BaseModel):
    Configuration: Optional[DataSourceConfiguration] = None
    CreatedAt: Optional[Timestamp] = None
    CustomDocumentEnrichmentConfiguration_1: Optional[
        CustomDocumentEnrichmentConfiguration
    ] = Field(None, alias='CustomDocumentEnrichmentConfiguration')
    Description_1: Optional[Description] = Field(None, alias='Description')
    ErrorMessage_1: Optional[ErrorMessage] = Field(None, alias='ErrorMessage')
    Id: Optional[DataSourceId] = None
    IndexId_1: Optional[IndexId] = Field(None, alias='IndexId')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Name: Optional[DataSourceName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    Schedule: Optional[ScanSchedule] = None
    Status: Optional[DataSourceStatus] = None
    Type: Optional[DataSourceType] = None
    UpdatedAt: Optional[Timestamp] = None
    VpcConfiguration: Optional[DataSourceVpcConfiguration] = None


class UpdateDataSourceRequest(BaseModel):
    Configuration: Optional[DataSourceConfiguration] = None
    CustomDocumentEnrichmentConfiguration_1: Optional[
        CustomDocumentEnrichmentConfiguration
    ] = Field(None, alias='CustomDocumentEnrichmentConfiguration')
    Description_1: Optional[Description] = Field(None, alias='Description')
    Id: DataSourceId
    IndexId_1: IndexId = Field(..., alias='IndexId')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Name: Optional[DataSourceName] = None
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    Schedule: Optional[ScanSchedule] = None
    VpcConfiguration: Optional[DataSourceVpcConfiguration] = None


class CreateDataSourceRequest(BaseModel):
    ClientToken: Optional[ClientTokenName] = None
    Configuration: Optional[DataSourceConfiguration] = None
    CustomDocumentEnrichmentConfiguration_1: Optional[
        CustomDocumentEnrichmentConfiguration
    ] = Field(None, alias='CustomDocumentEnrichmentConfiguration')
    Description_1: Optional[Description] = Field(None, alias='Description')
    IndexId_1: IndexId = Field(..., alias='IndexId')
    LanguageCode_1: Optional[LanguageCode] = Field(None, alias='LanguageCode')
    Name: DataSourceName
    RoleArn_1: Optional[RoleArn] = Field(None, alias='RoleArn')
    Schedule: Optional[ScanSchedule] = None
    Tags: Optional[TagList] = None
    Type: DataSourceType
    VpcConfiguration: Optional[DataSourceVpcConfiguration] = None


class AttributeFilter(BaseModel):
    AndAllFilters: Optional[AttributeFilterList] = None
    ContainsAll: Optional[DocumentAttribute] = None
    ContainsAny: Optional[DocumentAttribute] = None
    EqualsTo: Optional[DocumentAttribute] = None
    GreaterThan: Optional[DocumentAttribute] = None
    GreaterThanOrEquals: Optional[DocumentAttribute] = None
    LessThan: Optional[DocumentAttribute] = None
    LessThanOrEquals: Optional[DocumentAttribute] = None
    NotFilter: Optional[AttributeFilter] = None
    OrAllFilters: Optional[AttributeFilterList] = None


class AttributeFilterList(RootModel[List[AttributeFilter]]):
    root: List[AttributeFilter]


class DocumentAttributeValueCountPair(BaseModel):
    Count: Optional[Integer] = None
    DocumentAttributeValue_1: Optional[DocumentAttributeValue] = Field(
        None, alias='DocumentAttributeValue'
    )
    FacetResults: Optional[FacetResultList] = None


class DocumentAttributeValueCountPairList(
    RootModel[List[DocumentAttributeValueCountPair]]
):
    root: List[DocumentAttributeValueCountPair]


class Facet(BaseModel):
    DocumentAttributeKey_1: Optional[DocumentAttributeKey] = Field(
        None, alias='DocumentAttributeKey'
    )
    Facets: Optional[FacetList] = None
    MaxResults: Optional[TopDocumentAttributeValueCountPairsSize] = None


class FacetList(RootModel[List[Facet]]):
    root: List[Facet]


class FacetResult(BaseModel):
    DocumentAttributeKey_1: Optional[DocumentAttributeKey] = Field(
        None, alias='DocumentAttributeKey'
    )
    DocumentAttributeValueCountPairs: Optional[DocumentAttributeValueCountPairList] = (
        None
    )
    DocumentAttributeValueType_1: Optional[DocumentAttributeValueType] = Field(
        None, alias='DocumentAttributeValueType'
    )


class FacetResultList(RootModel[List[FacetResult]]):
    root: List[FacetResult]


class QueryRequest(BaseModel):
    AttributeFilter_1: Optional[AttributeFilter] = Field(None, alias='AttributeFilter')
    DocumentRelevanceOverrideConfigurations: Optional[
        DocumentRelevanceOverrideConfigurationList
    ] = None
    Facets: Optional[FacetList] = None
    IndexId_1: IndexId = Field(..., alias='IndexId')
    PageNumber: Optional[Integer] = None
    PageSize: Optional[Integer] = None
    QueryResultTypeFilter: Optional[QueryResultType] = None
    QueryText_1: Optional[QueryText] = Field(None, alias='QueryText')
    RequestedDocumentAttributes: Optional[DocumentAttributeKeyList] = None
    SortingConfiguration_1: Optional[SortingConfiguration] = Field(
        None, alias='SortingConfiguration'
    )
    SpellCorrectionConfiguration_1: Optional[SpellCorrectionConfiguration] = Field(
        None, alias='SpellCorrectionConfiguration'
    )
    UserContext_1: Optional[UserContext] = Field(None, alias='UserContext')
    VisitorId_1: Optional[VisitorId] = Field(None, alias='VisitorId')


class QueryResult(BaseModel):
    FacetResults: Optional[FacetResultList] = None
    FeaturedResultsItems: Optional[FeaturedResultsItemList] = None
    QueryId_1: Optional[QueryId] = Field(None, alias='QueryId')
    ResultItems: Optional[QueryResultItemList] = None
    SpellCorrectedQueries: Optional[SpellCorrectedQueryList] = None
    TotalNumberOfResults: Optional[Integer] = None
    Warnings: Optional[WarningList] = None


AttributeFilter.model_rebuild()
DocumentAttributeValueCountPair.model_rebuild()
Facet.model_rebuild()
